<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>GitHub Changelog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Thu, 13 Apr 2023 19:57:29 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.2</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>GitHub Changelog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>Dependabot プル リクエストの自動リベースは、非アクティブ状態が 30 日間続くと停止します</title><link>https://github.blog/changelog/2023-04-13-automatic-rebases-on-dependabot-pull-requests-stop-after-30-days-of-inactivity</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 13 Apr 2023 19:57:29 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-13-automatic-rebases-on-dependabot-pull-requests-stop-after-30-days-of-inactivity</guid><description>Automatic rebases on Dependabot pull requests stop after 30 days of inactivity</description><content:encoded>&lt;p&gt;リポジトリの変更によって Dependabot プル リクエストが古くなると、Dependabot は自動的にリベースし、手作業なしでマージできるようにします。このリリースでは、PR が 30 日間マージされていない場合、Dependabot はそのリベースを停止し、これに関するメモを PR 本文に含めます。プル リクエストを手動でリベースおよびマージすることは引き続き可能です。 Dependabot のうるささについてのフィードバックを聞いており、Dependabot をより静かにし、関心のあるリポジトリに集中できるようにしています。企業のお客様にとって、この改善により、セルフホストの GitHub Actions ランナーの効率が向上するという追加の利点があります。 Enterprise Server のお客様は、この更新プログラムを GHES 3.10 で利用できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/working-with-dependabot/managing-pull-requests-for-dependency-updates&quot;&gt;Dependabot プル リクエストの詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71345</post-id></item><item><title>エンタープライズ レベルの Dependabot、シークレット スキャン、コード スキャン ページのリポジトリ トピックとチーム フィルター</title><link>https://github.blog/changelog/2023-04-13-repository-topics-and-team-filters-for-enterprise-level-dependabot-secret-scanning-and-code-scanning-pages</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 13 Apr 2023 17:57:52 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-13-auto-draft</guid><description>You can now filter by repository topic or team on the enterprise-level Dependabot, code scanning, and secret scanning pages in security overview. These improvements have shipped to GitHub.com and will be available in GitHub Enterprise Server 3.9. Learn more security overview and send us your feedback Learn more about GitHub Advanced Security</description><content:encoded>&lt;p&gt;セキュリティ概要のエンタープライズ レベルの Dependabot、コード スキャン、およびシークレット スキャンのページで、リポジトリのトピックまたはチームでフィルター処理できるようになりました。 &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img decoding=&quot;async&quot; alt=&quot;リポジトリのトピックでフィルタリングされ、チームのドロップダウンを表示するコード スキャン エンタープライズ レベルのページ&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2262535/231641301-1ab28528-01fc-4b6d-9a8a-49c7520c9965.png?ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;
&lt;/p&gt;
&lt;p&gt;これらの改善は GitHub.com に出荷されており、GitHub Enterprise Server 3.9 で利用できるようになります。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/security-overview/about-the-security-overview&quot;&gt;セキュリティの概要の詳細を確認し&lt;/a&gt;、&lt;a href=&quot;https://github.com/github-community/community/discussions/categories/code-security&quot;&gt;フィードバックをお送りください&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;a href=&quot;https://github.com/features/security&quot;&gt;GitHub の高度なセキュリティについて詳しく知る&lt;/a&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71335</post-id></item><item><title>Dependabot が Docker イメージのリリース ノートと変更ログのフェッチをサポートするようになりました</title><link>https://github.blog/changelog/2023-04-13-dependabot-now-supports-fetching-release-notes-and-changelogs-for-docker-images</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 13 Apr 2023 16:43:56 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-13-dependabot-now-supports-fetching-release-notes-and-changelogs-for-docker-images</guid><description>Dependabot now supports fetching release notes and changelogs for Docker images</description><content:encoded>&lt;p&gt;Dependabot を使用して、Docker 更新プル リクエストのリリース ノート、変更ログ、コミット履歴を取得できるようになりました。これにより、依存関係のアップグレードの安定性リスクをすばやく評価できます。サポートを有効にするには、ソース リポジトリの URL を含む&lt;code&gt;org.opencontainers.image.source&lt;/code&gt;ラベルを Dockerfile に追加します。さらに、リポジトリは、公開された Docker イメージと同じタグでタグ付けする必要があります。これにより、Dependabot は、どのリポジトリとコミットが Docker イメージの各バージョン/タグに関連付けられているかを理解できます。&lt;a href=&quot;https://github.com/dependabot-fixtures/docker-with-source&quot;&gt;この設定を示すリポジトリの例を&lt;/a&gt;次に示します。&lt;/p&gt;
&lt;p&gt;知ってますか？&lt;a href=&quot;https://github.com/dependabot/dependabot-core&quot;&gt;依存関係の更新を識別するための Dependabot の内部ライブラリ&lt;/a&gt;はオープン ソースです。 Dependabot プル リクエストにメタデータが不足していることに気付いた場合は、オープン ソースの透過性を利用して根本原因をデバッグできます。たとえば、パッケージ メンテナーがメタデータ アノテーションを修正する必要がある場合などです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot&quot;&gt;ディペンダボットの詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71332</post-id></item><item><title>シークレット スキャンは、課題で歴史的に漏洩したシークレットを検出するようになりました</title><link>https://github.blog/changelog/2023-04-12-secret-scanning-now-detects-secrets-leaked-historically-in-issues</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 12 Apr 2023 21:46:38 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-12-secret-scanning-now-detects-secrets-leaked-historically-in-issues</guid><description>Secret scanning now detects secrets leaked historically in issues</description><content:encoded>&lt;p&gt;シークレット スキャンを使用している GitHub Advanced Security のお客様は、UI または&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/rest/secret-scanning?apiVersion=2022-11-28#about-the-secret-scanning-api&quot;&gt;REST API&lt;/a&gt;内の問題のタイトル、説明、またはコメントで過去に公開されたシークレットを表示できるようになりました。この拡張されたカバレッジは、リポジトリ、組織、またはエンタープライズ レベルで定義された&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning&quot;&gt;任意のカスタム パターン&lt;/a&gt;に一致するシークレットも検出して表示します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/about-secret-scanning&quot;&gt;シークレット スキャンでリポジトリを保護する方法を学ぶ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71328</post-id></item><item><title>REST API を使用して SBOM を生成する</title><link>https://github.blog/changelog/2023-04-12-generate-an-sbom-with-the-rest-api</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 12 Apr 2023 16:50:03 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-07-generate-an-sbom-with-the-rest-api</guid><description>Generate an SBOM with the REST API</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.blog/changelog/2023-03-28-generate-an-sbom-from-the-dependency-graph/&quot;&gt;リポジトリの依存関係グラフからソフトウェア部品表を生成する&lt;/a&gt;最近のリリースに続いて、 &lt;a href=&quot;https://docs.github.com/en/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository&quot;&gt;SBOM 用の新しい REST API&lt;/a&gt;を使用してリポジトリの SBOM を生成できるようになりました。結果の JSON は、リポジトリのメイン ブランチのヘッドを表します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph&quot;&gt;ディペンデンシー グラフの詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository&quot;&gt;SBOM API の詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71260</post-id></item><item><title>GitHub CLI での Webhook 転送</title><link>https://github.blog/changelog/2023-04-12-webhook-forwarding-in-the-github-cli</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 12 Apr 2023 13:12:23 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-12-webhook-forwarding-in-the-github-cli</guid><description>Webhook forwarding in the GitHub CLI</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.blog/changelog/2022-11-16-webhook-forwarding-in-the-github-cli-public-beta&quot;&gt;ベータ版&lt;/a&gt;が成功し、お客様から多くの素晴らしいフィードバックが寄せられたことを受けて、GitHub CLI での Webhook 転送が誰でも利用できるようになりました。&lt;/p&gt;
&lt;p&gt; Webhook 転送を使用すると&lt;a href=&quot;https://en.wikipedia.org/wiki/Port_forwarding&quot;&gt;、ポート転送&lt;/a&gt;について心配することなく、ローカル環境で&lt;a href=&quot;https://docs.github.com/developers/webhooks-and-events/webhooks/about-webhooks&quot;&gt;Webhook の&lt;/a&gt;統合を簡単にテストできます。&lt;/p&gt;
&lt;p&gt;ローカルで Webhook の受信を開始するのに必要なのは、1 つの簡単なコマンドだけです。&lt;/p&gt;
&lt;pre&gt; &lt;code&gt;gh webhook forward --repo monalisa/hello-world --events issues,pull_request --url http://localhost:4000/webhooks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細については、ドキュメントの&lt;a href=&quot;https://docs.github.com/developers/webhooks-and-events/webhooks/receiving-webhooks-with-the-github-cli&quot;&gt;「GitHub CLI を使用して webhook を受信する」&lt;/a&gt;に進んでください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71314</post-id></item><item><title>コード スキャンのデフォルト設定は Go で利用可能です</title><link>https://github.blog/changelog/2023-04-12-code-scanning-default-setup-is-available-for-go</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 12 Apr 2023 10:03:52 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-12-code-scanning-default-setup-is-available-for-go</guid><description>Code scanning default setup is available for Go</description><content:encoded>&lt;p&gt;コード スキャンのデフォルト設定が Go! で利用可能になりました。&lt;/p&gt;
&lt;p&gt;デフォルトのセットアップでは、リポジトリに最適な CodeQL 構成が自動的に検出され、セットアップされます。リポジトリ内の言語を検出し、すべてのプル リクエストとデフォルト ブランチおよび保護されたブランチへのすべてのプッシュに対して CodeQL 分析を有効にします。リポジトリが GitHub Actions を使用し、JavaScript/TypeScript、Python、Ruby、または Go を含む場合、リポジトリはデフォルト設定の対象となります。&lt;/p&gt;
&lt;p&gt; 「コードのセキュリティと分析」の下にあるリポジトリの「設定」タブで、デフォルトのセットアップを使用できます。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; loading=&quot;lazy&quot; width=&quot;671&quot; height=&quot;340&quot; src=&quot;https://github.blog/wp-content/uploads/2023/04/231187975-df5168c1-21fa-4cf1-9aeb-2aa7447e33b8.png?w=300&amp;#038;resize=671%2C340&quot; alt=&quot;コードスキャンのデフォルト設定 Go&quot; class=&quot;alignnone size-medium wp-image-71311&quot; srcset=&quot;https://github.blog/wp-content/uploads/2023/04/231187975-df5168c1-21fa-4cf1-9aeb-2aa7447e33b8.png?w=671 671w, https://github.blog/wp-content/uploads/2023/04/231187975-df5168c1-21fa-4cf1-9aeb-2aa7447e33b8.png?w=300&amp;#038;resize=671%2C340 300w&quot; sizes=&quot;(max-width: 671px) 100vw, 671px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;この新機能は現在 GitHub.com で利用可能で、GHES 3.10 にも同梱されます。より多くの言語サポートが間もなく提供される予定であり、 &lt;a href=&quot;https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/&quot;&gt;CodeQL でサポートされている他のすべての言語は、&lt;/a&gt; GitHub Actions ワークフロー ファイルを使用して引き続き機能します。 API アップロードまたはサードパーティの分析ツールを使用してコード スキャンを設定するオプションは引き続きサポートされ、変更されていません。&lt;/p&gt;
&lt;p&gt;コード スキャンのデフォルト設定の詳細については、 &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository#configuring-code-scanning-automatically&quot;&gt;コード スキャンの自動設定&lt;/a&gt;を参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71310</post-id></item><item><title>シークレット スキャンで、アクティブな GitHub トークンのメタデータが表示されるようになりました</title><link>https://github.blog/changelog/2023-04-11-secret-scanning-now-shows-metadata-for-active-github-tokens</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 11 Apr 2023 21:55:59 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-11-secret-scanning-now-shows-metadata-for-active-github-tokens</guid><description>Secret scanning now shows metadata for active GitHub tokens</description><content:encoded>&lt;p&gt;シークレット スキャン アラートにアクセスできるユーザーは、リポジトリでリークされたアクティブな GitHub トークンのメタデータを表示できるようになりました。メタデータには、トークンの所有者、有効期限、アクセス許可などの詳細が含まれます。この情報を使用して、セキュリティ チームはリークの潜在的な影響を評価し、それに応じて是正措置の優先順位を付けることができます。&lt;/p&gt;
&lt;p&gt;この機能は、 &lt;a href=&quot;https://github.blog/changelog/2023-01-19-secret-scanning-users-can-now-see-the-validity-of-detected-github-tokens/&quot;&gt;漏洩した GitHub トークンの有効性チェックを&lt;/a&gt;導入した 1 月の以前のリリースに基づいています。 &lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img decoding=&quot;async&quot; loading=&quot;lazy&quot; width=&quot;2038&quot; height=&quot;1334&quot; src=&quot;https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334&quot; alt=&quot;ギットハブ&quot; class=&quot;alignnone wp-image-71307 width-fit&quot; srcset=&quot;https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334w=2038 2038w, https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334w=300 300w, https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334w=768 768w, https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334w=1024 1024w, https://github.blog/wp-content/uploads/2023/04/image.png?resize=2038%2C1334w=1536 1536w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/managing-alerts-from-secret-scanning#reviewing-github-token-metadata&quot;&gt;GitHub トークンのメタデータを確認する方法を学ぶ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning&quot;&gt;シークレット スキャンの詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;フィードバックはありますか？&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/code-security&quot;&gt;コード セキュリティ ディスカッション&lt;/a&gt;でディスカッションを開いてください。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71305</post-id></item><item><title>GraphQL API のリポジトリ アーカイブ日付</title><link>https://github.blog/changelog/2023-04-11-repository-archive-date-in-graphql-api</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 11 Apr 2023 20:26:22 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-11-repository-archive-date-in-graphql-api</guid><description>Repository archive date in GraphQL API</description><content:encoded>&lt;p&gt;最近、&lt;a href=&quot;https://github.blog/changelog/2022-11-23-repository-archive-date-now-shown-in-ui/&quot;&gt;リポジトリのアーカイブ日付を GitHub UI に追加した&lt;/a&gt;後、タイムスタンプは GraphQL API 応答でも利用できるようになりました。&lt;/p&gt;
&lt;p&gt;ユーザーは、GitHub &lt;a href=&quot;https://docs.github.com/en/graphql&quot;&gt;GraphQL API&lt;/a&gt;を使用してリポジトリがアーカイブされたときの&lt;code&gt;archivedAt&lt;/code&gt;タイムスタンプを照会できるようになりました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71304</post-id></item><item><title>プル リクエストでのファイルへのコメントの一般提供が開始されました</title><link>https://github.blog/changelog/2023-04-11-commenting-on-files-in-a-pull-request-is-now-generally-available</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 11 Apr 2023 19:40:18 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-04-11-commenting-on-files-in-a-pull-request-is-now-generally-available</guid><description>Commenting on files in a pull request is now generally available</description><content:encoded>&lt;p&gt;プル リクエスト内のファイル (削除されたファイル、バイナリ ファイル、名前が変更されたファイルを含む) へのコメントは、Web と GitHub モバイルで一般的に利用できるようになりました。 &lt;a href=&quot;https://github.blog/changelog/2023-03-14-comment-on-files-in-a-pull-request-public-beta/&quot;&gt;パブリック ベータ&lt;/a&gt;期間中に&lt;a href=&quot;https://github.com/orgs/community/discussions/49954&quot;&gt;フィードバックを&lt;/a&gt;提供してくれたすべての人に特に感謝します。&lt;/p&gt;
&lt;p&gt; API サポートも利用できるようになりました。ファイルへのコメントの詳細については&lt;a href=&quot;https://docs.github.com/en/rest/pulls/comments?apiVersion=2022-11-28#create-a-review-comment-for-a-pull-request&quot;&gt;、レビュー コメントの作成&lt;/a&gt;(REST API) または&lt;a href=&quot;https://docs.github.com/en/graphql/reference/mutations#addpullrequestreviewthread&quot;&gt;&lt;code&gt;addPullRequestReviewThread&lt;/code&gt;&lt;/a&gt; (GraphQL ミューテーション) を参照してください。コメントが&lt;code&gt;line&lt;/code&gt;または&lt;code&gt;file&lt;/code&gt;どちらにあるかを示す新しい「件名タイプ」フィールドも、他の API によって返されるようになりました。&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot; id=&quot;learn-more&quot; &gt;もっと詳しく知る&lt;a href=&quot;#learn-more&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Learn more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request&quot;&gt;プル リクエストへのコメントの&lt;/a&gt;詳細については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">71294</post-id></item></channel></rss>