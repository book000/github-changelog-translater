<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>GitHub Changelog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Mon, 24 Oct 2022 20:38:39 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.0.3</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>GitHub Changelog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>Dependabot が Python PEP 621 標準のサポートを更新</title><link>https://github.blog/changelog/2022-10-24-dependabot-updates-support-for-the-python-pep-621-standard</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 24 Oct 2022 20:38:39 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-24-dependabot-updates-support-for-the-python-pep-621-standard</guid><description>Dependabot updates support for the Python PEP 621 standard</description><content:encoded>&lt;p&gt;Dependabot は、サポートされ&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates#supported-repositories-and-ecosystems&quot;&gt;ている Python パッケージ マネージャー&lt;/a&gt;の&lt;a href=&quot;https://peps.python.org/pep-0621/&quot;&gt;PEP 621 標準&lt;/a&gt;に準拠する&lt;code&gt;pyproject.toml&lt;/code&gt;ファイルの Python 依存関係の更新をサポートするようになりました。&lt;/p&gt;
&lt;p&gt; Dependabot で&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates#supported-repositories-and-ecosystems&quot;&gt;サポートされているエコシステムとパッケージ マネージャー&lt;/a&gt;の詳細をご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68145</post-id></item><item><title>必要に応じて増やす戦略を使用して、Python プロジェクトでの Dependabot のバージョン更新を減らします</title><link>https://github.blog/changelog/2022-10-24-reduce-dependabot-version-updates-in-your-python-projects-with-the-increase-if-necessary-strategy</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 24 Oct 2022 18:59:06 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-24-reduce-dependabot-version-updates-in-your-python-projects-with-the-increase-if-necessary-strategy</guid><description>Reduce Dependabot version updates in your Python projects with the increase-if-necessary strategy</description><content:encoded>&lt;p&gt;Dependabot は、Python エコシステム&lt;code&gt;increase-if-necessary&lt;/code&gt;バージョン管理戦略をサポートするようになりました。&lt;/p&gt;
&lt;p&gt;これにより、現在の依存関係の要件が新しいバージョンによって既に満たされている場合に、Dependabot のバージョンの更新を減らすことができます。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;dependabot.yml&lt;/code&gt;ファイルで&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#versioning-strategy&quot;&gt;バージョン管理戦略&lt;/a&gt;を構成する方法については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68130</post-id></item><item><title>npm v9.0.0 リリース</title><link>https://github.blog/changelog/2022-10-24-npm-v9-0-0-released</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 24 Oct 2022 16:56:39 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-24-npm-v9-0-0-released</guid><description>npm v9.0.0 released</description><content:encoded>&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; CLI チームは、過去数か月にわたって懸命に取り組んできました。本日、次のメジャー バージョン&lt;a href=&quot;https://github.com/npm/cli/releases/tag/v9.0.0&quot;&gt;&lt;code&gt;v9.0.0&lt;/code&gt;&lt;/a&gt;のリリースを発表できることをうれしく思います。&lt;/p&gt;
&lt;h3 id=&quot;installation&quot; id=&quot;installation&quot; &gt;インストール&lt;a href=&quot;#installation&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Installation&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;次のコマンドを実行して、今日から&lt;code&gt;npm&lt;/code&gt; &lt;code&gt;v9.0.0&lt;/code&gt;を使い始めることができます。&lt;/p&gt;
&lt;pre&gt; &lt;code&gt;$ npm i -g npm@9&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;about-this-release&quot; id=&quot;about-this-release&quot; &gt;このリリースについて&lt;a href=&quot;#about-this-release&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;About this release&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;このメジャー リリースでの私たちの目標は、適切なデフォルトを標準化し、可能な場合は従来の構成をクリーンアップすることでした。加えられた変更は、デフォルトの&lt;code&gt;npm&lt;/code&gt;エクスペリエンスを長期的に改善するための土台を築くものであると考えています。特に、Docker ユーザーは、ファイルのアクセス許可を簡素化するため、このリリースが有益であることに気付くはずです (ref. &lt;a href=&quot;https://github.com/npm/cli/pull/5703&quot;&gt;#5703&lt;/a&gt; &amp; &lt;a href=&quot;https://github.com/npm/cli/pull/5704&quot;&gt;#5704&lt;/a&gt; )。&lt;/p&gt;
&lt;h3 id=&quot;timeline-to-ga&quot; id=&quot;timeline-to-ga&quot; &gt; GA までのタイムライン&lt;a href=&quot;#timeline-to-ga&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Timeline to GA&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;本日&lt;code&gt;v9.0.0&lt;/code&gt;を公開しましたが、npm レジストリでこのリリースをすぐに&lt;code&gt;latest&lt;/code&gt;に設定したり、この「一般公開」を検討したりすることはありません。私たちのチームは&lt;a href=&quot;https://github.com/nodejs/Release/issues/778&quot;&gt;、Node.js リリース WG と協力して、&lt;/a&gt; &lt;code&gt;v9&lt;/code&gt;を CLI の次のメジャー バージョンとして最も幅広いユーザーが利用できるようにするための段階的なアプローチを進めてきました。これは、 &lt;code&gt;v9&lt;/code&gt;をできるだけ多くの Node.js LTS バージョンに安全にバックポートできることを意味します。それを念頭に置いて、以下に概説する段階的なロールアウト計画をまとめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;10月19日（水&lt;/strong&gt;）（本日）
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;npm@9.0.0&lt;/code&gt;がリリースされ、 &lt;code&gt;next-9&lt;/code&gt; dist-tag に設定されます (以前はプレリリースに使用されていました)。&lt;/li&gt;
&lt;li&gt; CLI チームは、 &lt;code&gt;v9.x&lt;/code&gt;のマイナー バージョンとパッチ バージョンを引き続き削減し、重大な変更 (以下に概説) から生じるフィードバックや予期しない問題に対処します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;11 月 9 日水曜日&lt;/strong&gt;(一般提供)
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;npm@9.x&lt;/code&gt;が Node.js LTS に対して「非破壊的」と見なされるようにするために、&lt;a href=&quot;https://github.com/nodejs/release&quot;&gt;リリース WG&lt;/a&gt;と協力して一連の終了基準を成文化します。&lt;/li&gt;
&lt;li&gt; &lt;code&gt;npm@9.x&lt;/code&gt;は&lt;code&gt;latest&lt;/code&gt; dist-tag に設定されます ( &lt;code&gt;npm&lt;/code&gt;の最新の保守バージョンになります)&lt;/li&gt;
&lt;li&gt; &lt;code&gt;npm@9.x&lt;/code&gt;を&lt;code&gt;nodejs/node&lt;/code&gt;の&lt;code&gt;main&lt;/code&gt;ブランチに配置するための PR が開かれます (実験的/夜間ユーザーにこの最新バージョンを公開します)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;12 月 7 日水曜日&lt;/strong&gt;(GA から 4 週間後)
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;node@19&lt;/code&gt;の&lt;code&gt;npm@9.x&lt;/code&gt;をバックポートするための PR が開かれます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 月 18 日水曜日&lt;/strong&gt;( &lt;code&gt;node@19&lt;/code&gt;バックポートから 6 週間後)
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;node@18&lt;/code&gt;の&lt;code&gt;npm@9.x&lt;/code&gt;をバックポートする PR が開かれます&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;&amp;#x26a0;-notable-breaking-changes&quot; id=&quot;&amp;#x26a0;-notable-breaking-changes&quot; &gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/26a0.png&quot; alt=&quot;⚠&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;重大な変更点&lt;a href=&quot;#&amp;#x26a0;-notable-breaking-changes&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;&amp;#x26a0; Notable Breaking Changes&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;node&lt;/code&gt;の互換性のある semver 範囲が次のように更新されました: &lt;code&gt;^14.17.0 || ^16.13.0 || &gt;=18.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;npm&lt;/code&gt;は、作成したファイルの所有権を変更しようとしなくなりました&lt;/li&gt;
&lt;li&gt;構成ファイルで見つかった特定のレジストリにスコープされていない認証関連の設定の存在はサポートされなくなり、エラーがスローされます&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt; 、 &lt;code&gt;adduser&lt;/code&gt; 、および&lt;code&gt;auth-type&lt;/code&gt;変更
&lt;ul&gt;
&lt;li&gt;従来の認証タイプ&lt;code&gt;sso&lt;/code&gt; 、 &lt;code&gt;saml&lt;/code&gt; 、および&lt;code&gt;legacy&lt;/code&gt;は&lt;code&gt;&quot;legacy&quot;&lt;/code&gt;に統合されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth-type&lt;/code&gt;デフォルトは&lt;code&gt;&quot;web&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;login&lt;/code&gt;と&lt;code&gt;adduser&lt;/code&gt;は、異なるデータを送信する別のコマンドになりました&lt;br /&gt;
レジストリ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt;npm pack&lt;/code&gt;は、無視ルールを適用する際に操作の厳密な順序に従うようになりました。 &lt;code&gt;files&lt;/code&gt;配列が&lt;code&gt;package.json&lt;/code&gt;に存在する場合、ルートからの&lt;code&gt;.gitignore&lt;/code&gt;および&lt;code&gt;.npmignore&lt;/code&gt;ファイルのルールは無視されます。&lt;/li&gt;
&lt;li&gt; git URL から生成されたリンクは、デフォルトの参照として&lt;code&gt;master&lt;/code&gt;の代わりに&lt;code&gt;HEAD&lt;/code&gt;を使用するようになりました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timing&lt;/code&gt;と&lt;code&gt;loglevel&lt;/code&gt;変更
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--loglevel&lt;/code&gt;の値としての&lt;code&gt;timing&lt;/code&gt;が削除されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--timing&lt;/code&gt;はタイミング情報を表示します。&lt;br /&gt;
 &lt;code&gt;--loglevel&lt;/code&gt; 、 &lt;code&gt;--silent&lt;/code&gt;の場合を除く&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--timing&lt;/code&gt;ファイルの変更:
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;--timing&lt;/code&gt;フラグを指定して実行すると、 &lt;code&gt;npm&lt;/code&gt;はタイミング データを&lt;br /&gt;
&lt;code&gt;logs-dir&lt;/code&gt;オプションを考慮して、デバッグ ログ データと一緒にファイル&lt;br /&gt;
フォールバック&lt;CACHE&gt;&lt;code&gt;/_logs/&lt;/code&gt; dir、直接内部ではなく&lt;br /&gt;
キャッシュ ディレクトリ。&lt;/li&gt;
&lt;li&gt;タイミング ファイルのデータは、改行で区切られた JSON ではなくなり、代わりに&lt;br /&gt;
実行するたびに、一意の名前の&lt;ID&gt;&lt;code&gt;-timing.json&lt;/code&gt;ファイル。&lt;br /&gt;
&lt;ID&gt;部分はデバッグ ログと同じです。&lt;/li&gt;
&lt;li&gt;最後に、ファイル内のデータには 3 つの最上位キーがあります。&lt;br /&gt;
すべての代わりに、 &lt;code&gt;metadata&lt;/code&gt; 、 &lt;code&gt;timers&lt;/code&gt; 、および&lt;code&gt;unfinishedTimers&lt;/code&gt;&lt;br /&gt;
トップレベルのキー。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt;npm&lt;/code&gt;は標準出力にいくつかの json エラーを出力するようになりました。以前は、 &lt;code&gt;npm&lt;/code&gt;はすべての json 形式のエラーを stderr に出力していました。通常、stderr ストリームには既にログが書き込まれているため、解析が困難でした。&lt;/li&gt;
&lt;li&gt; &lt;code&gt;--install-strategy&lt;/code&gt;を優先する非推奨のブール型インストール フラグ
&lt;ul&gt;
&lt;li&gt;非推奨&lt;code&gt;--global-style&lt;/code&gt; 、 &lt;code&gt;--global&lt;/code&gt;が&lt;code&gt;--install-strategy=shallow&lt;/code&gt;設定するようになりました&lt;/li&gt;
&lt;li&gt;非推奨&lt;code&gt;--legacy-bundling&lt;/code&gt; 、 &lt;code&gt;--install-strategy=nested&lt;/code&gt;設定するようになりました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm config set&lt;/code&gt;は、非推奨または無効な構成オプションを受け入れなくなりました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install-links&lt;/code&gt; config のデフォルトは&lt;code&gt;&quot;true&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;node-version&lt;/code&gt;設定が削除されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm-version&lt;/code&gt;が削除されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm access&lt;/code&gt;サブコマンドの名前が変更されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm birthday&lt;/code&gt;が削除されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm set-script&lt;/code&gt;が削除されました&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm bin&lt;/code&gt;が削除されました ( &lt;code&gt;npx&lt;/code&gt;または&lt;code&gt;npm exec&lt;/code&gt;を使用してバイナリを実行します)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;notable-features&quot; id=&quot;notable-features&quot; &gt;注目すべき機能&lt;a href=&quot;#notable-features&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Notable Features&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/npm/cli/commit/a09e19d88f046e54e8d75343883635a1bd056310&quot;&gt;&lt;code&gt;a09e19d&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/npm/cli/pull/5696&quot;&gt;#5696&lt;/a&gt;新しい&lt;code&gt;npm config fix&lt;/code&gt;コマンド (@nlf)&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/npm/cli/commit/3445da0138f9eed9d73d2b3f5f451fcc1fa2e3fe&quot;&gt;&lt;code&gt;3445da0&lt;/code&gt;&lt;/a&gt; &lt;code&gt;npm&lt;/code&gt;タイミングがデバッグ ログ ファイルと一緒に書き込まれるようになりました (@lukekarrys)&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/npm/cli/commit/6ee5b320d2eab58c18d50b861b3cfabe7f24124a&quot;&gt;&lt;code&gt;6ee5b32&lt;/code&gt;&lt;/a&gt; query: 結果に&lt;code&gt;queryContext&lt;/code&gt;を表示するようになりました (@nlf)&lt;/li&gt;
&lt;li&gt; &lt;a href=&quot;https://github.com/npm/cli/commit/314311c61b8f341715c168199d52976ee3237077&quot;&gt;&lt;code&gt;314311c&lt;/code&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/npm/cli/pull/5550&quot;&gt;#5550&lt;/a&gt; &lt;code&gt;login&lt;/code&gt; / &lt;code&gt;adduser&lt;/code&gt; (@wraithgar) の分離&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/npm/cli/commit/de2d33f3ed42e187803bdd31db4f7a12f08f353c&quot;&gt;&lt;code&gt;de2d33f&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;--install-strategy=hoisted|nested|shallow&lt;/code&gt; (#5709) (@fritzy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このリリースの詳細については、GitHub&lt;a href=&quot;https://github.com/npm/cli/releases/tag/v9.0.0&quot;&gt;リリース ノート&lt;/a&gt;を参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68129</post-id></item><item><title>シークレット スキャンで暗号化されたシークレットが保存されるようになりました</title><link>https://github.blog/changelog/2022-10-24-secret-scanning</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 24 Oct 2022 15:44:37 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-24-secret-scanning</guid><description>Secret scanning</description><content:encoded>&lt;p&gt;GitHub は、対称暗号化を使用して検出されたシークレットを保存するようになりました。暗号化されたシークレットを保存すると、シークレット スキャンで可能な限り最高のユーザー エクスペリエンスを提供できます。&lt;/p&gt;
&lt;p&gt;以前は、公開されたシークレットの場所とそのハッシュのみを保存していました。したがって、ユーザー エクスペリエンスまたは API でシークレットを提示するたびに、その場所とハッシュからシークレットを再導出する必要がありました。これは、UI または API で検出されたシークレットのプレビューを常に表示できるとは限らず、ユーザーが適切な失効と修正を確実に行うことができないことを意味していました。以下は、以前はシークレット プレビューをユーザーに表示できなかった場合の例です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;コントリビューターが秘密を漏らし、Git 履歴を書き直した場合&lt;/li&gt;
&lt;li&gt;実用的なパフォーマンス上の理由から、シークレットが特定のサイズよりも大きいファイルで見つかった場合&lt;/li&gt;
&lt;li&gt;GitHub UI でのプレビューと互換性のない特定のテキスト エンコーディングのファイルでシークレットが検出された場合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在、GitHub は対称暗号化を使用して、検出されたシークレットをソース コードとは別に保存します。この情報を保存することで、バージョン履歴から削除された場合でも、一貫したユーザー エクスペリエンスで検出されたシークレットをより確実に取得して表示できます。その結果、ユーザーは、以前に検出された秘密が何であったか、以前の暴露が長期的な脅威を表しているかどうかを疑問に思うことはなくなります。&lt;/p&gt;
&lt;p&gt;ユーザーのセキュリティは常に最優先事項であり、シークレット ストレージへの変更により、ユーザーはソフトウェアを保護するために必要な適切な修復と失効の手順を実行できるようになると確信しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-advanced-security&quot;&gt;GitHub Advanced Security のシークレット スキャンの詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68126</post-id></item><item><title>シークレット スキャンのエンタープライズ レベルの有効化イベントが監査ログに記録されるようになりました</title><link>https://github.blog/changelog/2022-10-21-secret-scanning-enterprise-level-enablement-events-now-in-the-audit-log</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 21 Oct 2022 21:17:48 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-21-secret-scanning-enterprise-level-enablement-events-now-in-the-audit-log</guid><description>Secret scanning enterprise-level enablement events now in the audit log</description><content:encoded>&lt;p&gt;エンタープライズ監査ログは、GitHub Advanced Security、シークレット スキャン、およびプッシュ保護の有効化に対する変更を記録するようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning-category-actions&quot;&gt;business_secret_scanning&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_push_protection-category-actions&quot;&gt;business_secret_scanning_push_protection&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_push_protection_custom_message-category-actions&quot;&gt;business_secret_scanning_push_protection_custom_message&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;組織レベルの監査ログは、 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#org-category-actions&quot;&gt;プッシュ保護のカスタム メッセージ&lt;/a&gt;が有効、無効、または更新されたときにも記録されるようになりました。&lt;/p&gt;
&lt;p&gt;詳細については：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/about-secret-scanning&quot;&gt;シークレット スキャンの詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise&quot;&gt;企業の監査ログ イベントの詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization&quot;&gt;組織の監査ログ イベントの詳細&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68118</post-id></item><item><title>Dev Container Editor を使用した Codespaces の設定</title><link>https://github.blog/changelog/2022-10-21-codespaces-configuration-with-the-dev-container-editor</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 21 Oct 2022 20:30:58 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-21-codespaces-configuration-with-the-dev-container-editor</guid><description>Codespaces Configuration with the Dev Container Editor</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers&quot;&gt;Codespaces の設定を&lt;/a&gt;追加するには、&lt;a href=&quot;https://containers.dev/&quot;&gt;開発コンテナ&lt;/a&gt;をリポジトリに追加し、ニーズに合わせて編集する必要があります。以前は、dev コンテナー構成は手動で作成するか、VS Code 拡張機能を使用して作成することができました。 GitHub リポジトリ ページの [コード] ドロップダウンから構成を直接作成または編集する機能が追加されました。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/197280999-2bffe0c5-cb4b-4222-85b5-c6e208a450ba.png?ssl=1&quot; alt=&quot;新しい Codespaces 構成オプションを示すコード ドロップダウン&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;このメカニズムを使用する場合でも、リポジトリに既に開発コンテナーがある場合でも、新しい構成エディターを使用して GitHub 内でその構成を編集できるようになりました。リポジトリのコード ビューからエディターを開くには、 &lt;code&gt;devcontainer.json&lt;/code&gt;ファイルを表示しているときに鉛筆アイコンをクリックします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/197277219-e92ee2ee-d0b0-4263-9e16-716d20f7d89c.png?ssl=1&quot; alt=&quot;devcontainer.json ファイルのビューのスクリーンショット&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;devcontainer.json&lt;/code&gt;ファイルをブラウザーで編集しています。開発コンテナは、&lt;a href=&quot;https://containers.dev/implementors/json_reference/&quot;&gt;開発コンテナの仕様&lt;/a&gt;に準拠する必要があります。エディターを使用すると、&lt;a href=&quot;https://containers.dev/implementors/features/&quot;&gt;開発コンテナーの機能&lt;/a&gt;を簡単に使用できます。開発コンテナ機能は、リポジトリから作成された Codespaces の再利用可能な構成を提供します。開発コンテナー エディターの右側から利用可能な機能を参照します。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/197276727-984cf174-d68d-4b4e-92a7-62059bc55da8.png?ssl=1&quot; alt=&quot;エディターとマーケットプレイスのスクリーンショット&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;開発コンテナー機能を使用するには、 &lt;code&gt;json&lt;/code&gt;のスニペットをコピーして、 &lt;code&gt;devcontainer.json&lt;/code&gt;ファイルの&lt;code&gt;features&lt;/code&gt;オブジェクトに配置します。必要な機能が揃ったら、[コミットの開始] ボタンをクリックして、それらの変更をリポジトリにコミットします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/197070557-be1f3477-3684-4393-88c5-3a8ce53ee8e6.png?ssl=1&quot; alt=&quot;開始コミット ボタン機能のスクリーンショット&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;これにより、Codespaces のリポジトリの構成が大幅に簡単になることを願っています。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68117</post-id></item><item><title>最新リリースを明示的に設定する</title><link>https://github.blog/changelog/2022-10-21-explicitly-set-the-latest-release</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 21 Oct 2022 10:27:14 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-21-explicitly-set-the-latest-release</guid><description>Explicitly Set the Latest Release</description><content:encoded>&lt;p&gt;GitHub では、開発者がコードの最適なバージョンをユーザーに簡単にリリースできるように努めています。その結果、コードのどのリリースが最新かを明示的に設定できる新機能をロールアウトしました。&lt;/p&gt;
&lt;p&gt;以前は、リポジトリの最新リリースは、最新の日付に作成されたものでした。複数のリリースが同じ日付であった場合、セマンティック バージョン番号が引き分けになりました。&lt;/p&gt;
&lt;p&gt;この新機能は、リリースの作成時にリリースを「最新」としてマークするための明示的な切り替えを提供します。これにより、コードをより詳細に制御でき、Web インターフェースと API ( &lt;a href=&quot;https://docs.github.com/en/graphql/reference/objects#release&quot;&gt;GraphQL&lt;/a&gt; 、 &lt;a href=&quot;https://docs.github.com/en/rest/releases/releases#create-a-release&quot;&gt;REST&lt;/a&gt; ) の両方で機能します。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/533773/191272069-4a954c55-6d3b-494f-9db3-57e0d8f7f6b8.png?ssl=1&quot; alt=&quot;リリースを最新にする設定のスクリーンショット&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases&quot;&gt;リリース&lt;/a&gt;の詳細については、GitHub ドキュメントを参照してください。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/orgs/community/discussions&quot;&gt;GitHub コミュニティ ディスカッション&lt;/a&gt;で、このトピックやその他のトピックに関するフィードバックをお待ちしております。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68108</post-id></item><item><title>増分開発コンテナの再構築</title><link>https://github.blog/changelog/2022-10-20-incremental-dev-container-rebuild</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 21:45:59 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-incremental-dev-container-rebuild</guid><description>Incremental Dev Container Rebuild</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers&quot;&gt;dev コンテナーを使用して Codespaces の構成を&lt;/a&gt;構築する場合、デフォルトの動作でインクリメンタル リビルドが実行されるようになりました。既存の再構築機能は引き続き使用でき、「完全再構築」に名前が変更されました。&lt;/p&gt;
&lt;p&gt;増分再構築は、既存の Docker キャッシュの上に構築され、再構築間で共通のイメージとレイヤーを再利用するため、はるかに高速です。これは、非常に大きな Codespaces のデフォルト コンテナに構成を追加するとすぐにわかります。&lt;/p&gt;
&lt;p&gt; VS Code を使用する場合、コマンド パレットからこれらのコマンドにアクセスします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/196991032-e2b391b6-6423-49cb-911f-acd3a78de1cb.png?ssl=1&quot; alt=&quot;Visual Studio Code のコマンド パレットでコマンドを再構築します。&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;この変更前の再構築の動作は完全再構築でした。これは遅くなりますが、変更されていないイメージを再プルする前に仮想マシンからすべてのイメージを削除するため、正確性が保証されます。構成の再構築を何度も繰り返した後、ディスク領域を解放したり、構成からコードスペースをクリーンに作成するときに存在しないレイヤーに構成が依存しないようにしたい場合があります。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68107</post-id></item><item><title>Web インターフェイスからアクション ワークフローのキャッシュを管理する</title><link>https://github.blog/changelog/2022-10-20-manage-caches-in-your-actions-workflows-from-web-interface</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 19:57:58 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-manage-caches-in-your-actions-workflows-from-web-interface</guid><description>Manage caches in your Actions workflows from Web Interface</description><content:encoded>&lt;p&gt;&lt;img loading=&quot;lazy&quot; width=&quot;3600&quot; height=&quot;1890&quot; src=&quot;https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=300&amp;#038;resize=3600%2C1890&quot; alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-68111 width-fit&quot; srcset=&quot;https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=3600 3600w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=300&amp;#038;resize=3600%2C1890 300w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=768 768w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=1024 1024w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=1536 1536w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=2048 2048w, https://github.blog/wp-content/uploads/2022/10/197175502-43157893-9bc0-4dcb-bfb7-fe4e0d37936f.png?w=300&amp;#038;resize=3600%2C18900 3000w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;依存関係やその他の一般的に再利用されるファイルをキャッシュすることで、開発者は GitHub Actions ワークフローを高速化し、より効率的にすることができます。&lt;br /&gt;
 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/caching-dependencies-to-speed-up-workflows#managing-caches&quot;&gt;Web インターフェースからキャッシュ管理&lt;/a&gt;を有効にして、開発者が GitHub リポジトリ内でキャッシュの使用をより透過的に制御できるようにしました。&lt;/p&gt;
&lt;p&gt;アクション&lt;a href=&quot;https://github.com/actions/cache&quot;&gt;/キャッシュ&lt;/a&gt;を使用するアクション ユーザーは、次のことができるようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリのすべてのキャッシュ エントリのリストを表示します。&lt;/li&gt;
&lt;li&gt;キャッシュ サイズ、作成時間、最終アクセス時間などの特定のメタデータを使用して、キャッシュのリストをフィルター処理および並べ替えます。&lt;/li&gt;
&lt;li&gt;破損または古いキャッシュ エントリを削除する&lt;/li&gt;
&lt;li&gt;リポジトリと組織の集約キャッシュの使用状況を監視します。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; width=&quot;4069&quot; height=&quot;1455&quot; src=&quot;https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=300&amp;#038;resize=4069%2C1455&quot; alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-68112 width-fit&quot; srcset=&quot;https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=4069 4069w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=300&amp;#038;resize=4069%2C1455 300w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=768 768w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=1024 1024w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=1536 1536w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=2048 2048w, https://github.blog/wp-content/uploads/2022/10/197175589-a7af21c5-b3b6-4afd-8f92-3cc17e90af49.png?w=300&amp;#038;resize=4069%2C14550 3000w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;現在有効になっているキャッシュ管理 UX に加えて、&lt;a href=&quot;https://docs.github.com/en/rest/actions/cache&quot;&gt;キャッシュ API&lt;/a&gt;を使用するか&lt;a href=&quot;https://github.com/actions/gh-actions-cache#readme&quot;&gt;、Actions キャッシュ用の GitHub CLI 拡張機能を&lt;/a&gt;インストールして、ターミナルからキャッシュを管理することもできます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows&quot;&gt;Actions ワークフローを高速化するための依存関係キャッシュ&lt;/a&gt;の詳細については、こちらをご覧ください。&lt;br /&gt;
質問がある場合、またはフィードバックを共有するに&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/actions-and-packages&quot;&gt;は、GitHub Actions コミュニティ にアクセスして&lt;/a&gt;ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68106</post-id></item><item><title>Dependabot は、Yarn v2 および v3 のセキュリティとバージョンの更新を生成できるようになりました</title><link>https://github.blog/changelog/2022-10-20-dependabot-can-now-generate-security-and-version-updates-for-yarn-v2-and-v3</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 17:20:05 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-dependabot-can-now-generate-security-and-version-updates-for-yarn-v2-and-v3</guid><description>Dependabot can now generate security and version updates for Yarn v2 and v3</description><content:encoded>&lt;p&gt;Dependabot は、Yarn v2 および Yarn v3 マニフェスト ( &lt;code&gt;package.json&lt;/code&gt;および&lt;code&gt;yarn.lock&lt;/code&gt;ファイル) の依存関係を更新するためのサポートを追加しました。これは、Yarn v1 の既存のサポートに追加されます。 Dependabot のセキュリティ アップデートが有効になっている既存のリポジトリに必要なアクションはありませんが、Dependabot のバージョン アップデートでプロアクティブなアップデートを受け取りたい場合は、 &lt;code&gt;npm&lt;/code&gt;エコシステムの設定を&lt;code&gt;dependabot.yml&lt;/code&gt;ファイルに追加する必要があります。&lt;/p&gt;
&lt;p&gt;詳細については：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates&quot;&gt;Dependabot のバージョン更新の構成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates#supported-repositories-and-ecosystems&quot;&gt;Dependabot がサポートするエコシステムとパッケージ マネージャー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68102</post-id></item></channel></rss>