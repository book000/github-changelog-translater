<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>Changelogs Archive - The GitHub Blog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Tue, 07 May 2024 18:58:41 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.5.3</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>Changelogs Archive - The GitHub Blog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>アクション: Azure プライベート ネットワークの新しいリージョンのサポート</title><link>https://github.blog/changelog/2024-05-07-actions-new-region-support-for-azure-private-networking</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 07 May 2024 18:42:33 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-07-actions-new-region-support-for-azure-private-networking</guid><description>&lt;p&gt;Actions: New region support for Azure private networking&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-07-actions-new-region-support-for-azure-private-networking&quot;&gt;Actions: New region support for Azure private networking&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;Azure プライベート ネットワーキングは、 &lt;a href=&quot;https://github.blog/2024-04-02-bringing-enterprise-level-security-and-even-more-power-to-github-hosted-runners/&quot;&gt;2024 年 4 月&lt;/a&gt;に 11 の利用可能なリージョンで一般提供されました。 GitHub Actions では、サポートされるリージョンの数が 17 に拡張され、次のものが新たに追加されました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ドイツ西中部&lt;/li&gt;
&lt;li&gt;スウェーデン中部&lt;/li&gt;
&lt;li&gt;米国中北部&lt;/li&gt;
&lt;li&gt;米国中南部&lt;/li&gt;
&lt;li&gt;米国西部 3&lt;/li&gt;
&lt;li&gt;東日本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Azure プライベート ネットワーキングは、GitHub Enterprise Cloud および Team プランで利用できます。サポートされているリージョンの全リストについては、 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/troubleshooting-azure-private-network-configurations-for-github-hosted-runners-in-your-enterprise&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。ご希望の地域が現在利用できない場合は、 &lt;a href=&quot;https://resources.github.com/private-networking-for-github-hosted-runners-with-azure-virtual-networks/&quot;&gt;このフォーム&lt;/a&gt;を使用して地域リクエストを送信してください。&lt;/p&gt;
&lt;p&gt; Actions で Azure プライベート ネットワークの使用を開始するには、 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/admin/configuration/configuring-private-networking-for-hosted-compute-products/configuring-private-networking-for-github-hosted-runners-in-your-enterprise&quot;&gt;このガイド&lt;/a&gt;に従って Azure リソースを構成し、Actions ネットワーク構成を作成する手順を説明します。&lt;/p&gt;
&lt;p&gt;投稿「 &lt;a href=&quot;https://github.blog/changelog/2024-05-07-actions-new-region-support-for-azure-private-networking&quot;&gt;アクション: Azure プライベート ネットワークの新しいリージョン サポート」は、&lt;/a&gt;最初に&lt;a href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77946</post-id></item><item><title>ファイルアップロードに対するシークレットスキャンプッシュ保護</title><link>https://github.blog/changelog/2024-05-07-secret-scanning-push-protection-for-file-uploads</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 07 May 2024 16:16:07 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-07-secret-scanning-push-protection-for-file-uploads</guid><description>&lt;p&gt;Secret scanning push protection for file uploads&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-07-secret-scanning-push-protection-for-file-uploads&quot;&gt;Secret scanning push protection for file uploads&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;シークレット スキャンは、ブラウザ経由で行われる&lt;a href=&quot;https://docs.github.com/en/repositories/working-with-files/managing-files/adding-a-file-to-a-repository#adding-a-file-to-a-repository-on-github&quot;&gt;リポジトリ ファイルのアップロード&lt;/a&gt;に対する&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/push-protection-for-repositories-and-organizations&quot;&gt;プッシュ保護&lt;/a&gt;の適用範囲を拡大しています。リポジトリに対してプッシュ保護が有効になっている場合、シークレット スキャンにより、投稿者が検出されたシークレットを含むファイルをアップロードすることもブロックされるようになりました。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/push-protection-for-repositories-and-organizations&quot;&gt;プッシュ保護&lt;/a&gt;の詳細をご覧いただくか、シークレット スキャンに関する&lt;a href=&quot;https://forms.gle/Uhjq5VbLT5D3ELTL9&quot;&gt;60 分間のフィードバック セッション&lt;/a&gt;にサインアップして、時間の補償を受けてください。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.blog/changelog/2024-05-07-secret-scanning-push-protection-for-file-uploads&quot;&gt;ファイル アップロードに対するシークレット スキャン プッシュ保護の&lt;/a&gt;投稿は、最初に&lt;a href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77945</post-id></item><item><title>コード スキャンは単一のアップロードからの実行の結合を停止します</title><link>https://github.blog/changelog/2024-05-06-code-scanning-will-stop-combining-runs-from-a-single-upload</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 06 May 2024 18:25:57 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-06-code-scanning-will-stop-combining-runs-from-a-single-upload</guid><description>&lt;p&gt;Code Scanning will stop combining runs from a single upload&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-06-code-scanning-will-stop-combining-runs-from-a-single-upload&quot;&gt;Code Scanning will stop combining runs from a single upload&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;同じ&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#toolcomponent-object&quot;&gt;ツール&lt;/a&gt;および&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#runautomationdetails-object&quot;&gt;カテゴリ&lt;/a&gt;に対する複数の SARIF &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#run-object&quot;&gt;実行&lt;/a&gt;を含む&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#supported-sarif-output-file-properties&quot;&gt;SARIF&lt;/a&gt;ファイルをアップロードする場合、&lt;br /&gt;
コード スキャンでは、これらの実行が 1 つの実行に結合されます。&lt;/p&gt;
&lt;p&gt;同じ SARIF ファイル内で複数の実行を結合することは文書化されていない機能であり、本来は同じコミットに対する複数の分析のアップロードを簡素化することを目的としていました。それ以来、 &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#uploading-more-than-one-sarif-file-for-a-commit&quot;&gt;同じコミットに対して複数の分析をアップロード&lt;/a&gt;できるように、 &lt;code&gt;category&lt;/code&gt;の明示的な概念を導入しました。これにより、 &lt;a href=&quot;https://docs.oasis-open.org/sarif/sarif/v2.1.0/sarif-v2.1.0.html&quot;&gt;SARIF 仕様&lt;/a&gt;との整合性が向上しました。&lt;/p&gt;
&lt;p&gt;本日、同じファイル内の同じツールとカテゴリを使用した複数の SARIF 実行の組み合わせに対する非推奨パスを開始します。具体的には、今後数日のうちに、同じファイル内の同じツールとカテゴリによる複数の SARIF 実行の組み合わせに依存するサードパーティ ツールを使用する場合、 &lt;code&gt;github/codeql-action/upload-sarif&lt;/code&gt;&lt;a href=&quot;https://github.com/github/codeql-action/&quot;&gt;アクション&lt;/a&gt;で非推奨の警告が表示され始めます。非推奨の警告が表示されている間、SARIF ファイルのアップロードは成功します。&lt;/p&gt;
&lt;p&gt; 2025 年 6 月 (github.com の場合) および GHES 3.18 では、同じファイル内で同じツールおよびカテゴリを使用して複数の SARIF 実行を組み合わせることが完全に停止される予定であり、その時点で SARIF ファイルのアップロードは失敗します。&lt;/p&gt;
&lt;h2 id=&quot;how-does-this-affect-me&quot;&gt;これは私にどのような影響を与えますか? &lt;a href=&quot;#how-does-this-affect-me&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;How does this affect me?&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; &lt;code&gt;github/codeql-action/upload-sarif&lt;/code&gt;アクションを使用してサードパーティのコード スキャン ツールからの結果をアップロードしており、そのツールが単一の SARIF ファイル内で同じカテゴリの複数の実行を生成する場合、影響を受けます。&lt;br /&gt;
その場合は、非推奨の警告が表示され始めるため、ツール プロバイダーと協力して、SARIF ファイル内の各実行に個別の&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#toolcomponent-object&quot;&gt;ツール&lt;/a&gt;または&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#runautomationdetails-object&quot;&gt;カテゴリ&lt;/a&gt;が含まれるようにする必要があります。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;github/codeql-action/upload-sarif&lt;/code&gt;アクションを使用してサードパーティ ツールから複数の SARIF ファイルをアップロードしている場合は影響を受けます。ツール自体が複数の SARIF ファイルを生成する場合、またはマトリックス ビルドを使用して複数の分析を実行している場合、複数の SARIF ファイルが作成される可能性があります。具体的には、複数の SARIF ファイルを生成するマトリックス ビルドを実行しており、すべての SARIF ファイルをまとめてアップロードする専用のジョブがある場合です。たとえば、マトリックス ビルドを使用して 2 つのアプリを分析し、すべての SARIF ファイルをまとめてアップロードする専用の&lt;code&gt;upload&lt;/code&gt;ジョブがある場合、ワークフローは次のようになります。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-yaml&quot;&gt;jobs:
 analyze:
 ...
 strategy:
 matrix:
 app: [&amp;#39;app1&amp;#39;, &amp;#39;app2&amp;#39;]

 steps:
 - name: SAST Scan
 ...

 - name: Temporary store SARIF file
 uses: actions/upload-artifact@v4
 with:
 name: sarif-${{ matrix.app }}
 path: &quot;results&quot;

 upload:
 name: Upload SARIF
 needs: analyze
 steps:
 - name: Fetch SARIF files
 uses: actions/download-artifact@v4
 with:
 path: ../results
 pattern: sarif-*
 merge-multiple: true

 - name: Upload Results
 uses: github/codeql-action/upload-sarif@v3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合、 &lt;code&gt;github/codeql-action/upload-sarif&lt;/code&gt;アクションを呼び出して、個別の&lt;code&gt;category&lt;/code&gt;を含める必要があります。たとえば、マトリックス ジョブにステップを埋め込み、マトリックス変数を使用して一意のカテゴリを生成できます。このようにして、上記の例は次のようになります。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-yaml&quot;&gt;jobs:
 analyze:
 ...
 strategy:
 matrix:
 app: [&amp;#39;app1&amp;#39;, &amp;#39;app2&amp;#39;]

 steps:
 - name: SAST Scan
 ...

 - name: Upload Results
 uses: github/codeql-action/upload-sarif@v3
 with:
 category: ${{ matrix.app }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;code&gt;category&lt;/code&gt;の値を変更すると、古いアラートが開いたままになるため、以前の&lt;code&gt;category&lt;/code&gt;値を使用して&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/managing-code-scanning-alerts/managing-code-scanning-alerts-for-your-repository#removing-stale-configurations-and-alerts-from-a-branch&quot;&gt;設定を削除すること&lt;/a&gt;もできます。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;github/codeql-action&lt;/code&gt;アクション経由で CodeQL のみを使用している場合は影響を受けません。この動作に依存するいくつかのリポジトリについては、CodeQL CLI (バージョン 2.17.0 以降) には下位互換性のあるロジックが含まれています。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning#uploading-more-than-one-sarif-file-for-a-commit&quot;&gt;文書化されたアプローチ&lt;/a&gt;のいずれかを使用して、同じコミットに対して複数の SARIF ファイルをアップロードする場合は影響を受けません。&lt;/p&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;次は何ですか？ &lt;a href=&quot;#whats-next&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;What&amp;#8217;s next?&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 2025 年 6 月に、同じツールとカテゴリでの複数の実行を含む SARIF の github.com へのアップロードは拒否されます。&lt;/p&gt;
&lt;p&gt; 「 &lt;a href=&quot;https://github.blog/changelog/2024-05-06-code-scanning-will-stop-combining-runs-from-a-single-upload&quot;&gt;コード スキャンは単一アップロードからの実行の結合を停止します」&lt;/a&gt;という投稿が最初に&lt;a href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に登場しました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77924</post-id></item><item><title>[一般提供] エンタープライズ管理対象ユーザー向けのゲスト コラボレーター</title><link>https://github.blog/changelog/2024-05-02-ga-guest-collaborators-for-enterprise-managed-users</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 22:03:06 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-02-ga-guest-collaborators-for-enterprise-managed-users</guid><description>&lt;p&gt;[GA] Guest Collaborators for enterprise managed users&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-02-ga-guest-collaborators-for-enterprise-managed-users&quot;&gt;[GA] Guest Collaborators for enterprise managed users&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;GitHub Enterprise Cloud EMU のゲスト コラボレーターが一般提供されるようになりました。 &lt;a href=&quot;//github.blog/changelog/2023-11-08-public-beta-guest-collaborators-for-enterprise-managed-users/)&quot;&gt;昨年末にパブリック ベータ版で最初に発表された&lt;/a&gt;この機能により、アイデンティティ プロバイダーは&lt;code&gt;guest collaborator&lt;/code&gt;ロールをユーザーに割り当て、そのユーザーの&lt;code&gt;internal&lt;/code&gt;リポジトリへのデフォルト アクセスを制限できるようになります。&lt;/p&gt;
&lt;p&gt;私たちの手を GA エクスペリエンスに導いてくださった何千人ものパブリック ベータ参加者に感謝します。多くのリクエストに応えて、本日、EMU 企業での&lt;a href=&quot;https://github.blog/changelog/2024-05-02-public-beta-repository-collaborators-for-enterprise-managed-users/&quot;&gt;リポジトリ コラボレータ アクセスのパブリック ベータ版&lt;/a&gt;もリリースしました。これにより、エンタープライズ アカウントのメンバーであるユーザーの選択に限定された「外部コラボレーター」アクセス スタイルが EMU に導入されます。これら 2 つの機能を組み合わせることで、請負業者やその他のアクセスが制限されたユースケースのニーズに合わせて、特定のリポジトリや組織に可能な限り詳細なアクセス権を付与できます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/enterprise-cloud@latest/admin/managing-accounts-and-repositories/managing-users-in-your-enterprise/roles-in-an-enterprise#guest-collaborators&quot;&gt;ゲスト コラボレーター&lt;/a&gt;について詳しくはこちら&lt;/p&gt;
&lt;p&gt;投稿&lt;a href=&quot;https://github.blog/changelog/2024-05-02-ga-guest-collaborators-for-enterprise-managed-users&quot;&gt;[GA] エンタープライズ管理ユーザー向けのゲスト コラボレーターは、&lt;/a&gt; &lt;a href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に最初に登場しました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77861</post-id></item><item><title>[パブリック ベータ] エンタープライズ管理対象ユーザーのリポジトリ コラボレーター</title><link>https://github.blog/changelog/2024-05-02-public-beta-repository-collaborators-for-enterprise-managed-users</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 21:56:47 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-02-public-beta-repository-collaborators-for-enterprise-managed-users</guid><description>&lt;p&gt;[Public Beta] Repository collaborators for Enterprise Managed Users&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-02-public-beta-repository-collaborators-for-enterprise-managed-users&quot;&gt;[Public Beta] Repository collaborators for Enterprise Managed Users&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;エンタープライズ管理対象ユーザーは、組織のメンバーにならずに、企業内のリポジトリにコラボレータとして直接追加できるようになりました。これらのユーザーは外部コラボレーターと同様に機能しますが、いくつかの違いがあります。&lt;br /&gt;
 1. 企業内のユーザー アカウントのみをリポジトリに追加できます。つまり、コラボレーションしたいユーザーは、リンクされたアイデンティティ プロバイダー (IDP) から取得する必要があります。&lt;br /&gt;
 2. EMU ユーザーは、企業内のリポジトリのコラボレータのみになれます。 EMU アカウントは企業外で共同作業することはできません。&lt;br /&gt;
 3. Repo Collaborator の招待は、デフォルトでは EMU のエンタープライズ オーナーのみが送信できますが、非 EMU の企業および組織では、エンタープライズと組織の両方のオーナーが外部コラボレーターを管理できます。&lt;/p&gt;
&lt;p&gt;外部コラボレータと同様に、ユーザーは、リポジトリ コラボレータとしてアクセスを許可されたリポジトリにアクセスするために、資格情報を SSO 認証する必要はありません。これは、GitHub 上の&lt;code&gt;internal&lt;/code&gt;リポジトリの現在のアクセス モデルと一致しています。&lt;/p&gt;
&lt;p&gt;リポジトリ コラボレータを試すには、エンタープライズ設定のリポジトリ ポリシー セクションに移動し、どの層の管理者にコラボレータの招待を許可するかを選択します。&lt;/p&gt;
&lt;p&gt;リポジトリと外部コラボレーターの詳細については、「 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/roles-in-an-organization&quot;&gt;組織内の役割&lt;/a&gt;」を参照してください。&lt;/p&gt;
&lt;p&gt;投稿&lt;a href=&quot;https://github.blog/changelog/2024-05-02-public-beta-repository-collaborators-for-enterprise-managed-users&quot;&gt;[パブリック ベータ] エンタープライズ管理ユーザー向けリポジトリ コラボレーター&lt;/a&gt;appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt; .&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77860</post-id></item><item><title>dependabot のプル リクエスト ジョブが、自己ホスト型の GitHub Actions ランナーで実行できるようになりました</title><link>https://github.blog/changelog/2024-05-02-dependabot-pull-requests-jobs-are-now-available-to-run-on-self-hosted-actions-runners</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 16:56:44 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-02-dependabot-pull-requests-jobs-are-now-available-to-run-on-self-hosted-actions-runners</guid><description>&lt;p&gt;Dependabot pull requests jobs are now available to run on self hosted Actions runners&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-02-dependabot-pull-requests-jobs-are-now-available-to-run-on-self-hosted-actions-runners&quot;&gt;Dependabot pull requests jobs are now available to run on self hosted GitHub Actions runners&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;以前は、プライベート レジストリを使用して内部ネットワーク上でパッケージをホストしていた開発者は、Dependabot を使用してコード内のパッケージのバージョンを更新できませんでした。&lt;/p&gt;
&lt;p&gt;この変更により、ユーザーは、セルフホスト型 GitHub Actions ランナーを使用してプライベート ネットワーク上で dependabot プル リクエスト ジョブを実行することを選択できるようになり、Dependabot がオンプレミスのプライベート レジストリにアクセスして、それらのパッケージを更新できるようになります。&lt;/p&gt;
&lt;p&gt;セルフホスト ランナーを有効にするための前提条件には、対象のリポジトリに対して GitHub アクションを有効にすることが含まれます。 &lt;strong&gt;dependabot の実行は GitHub Actions の分にはカウントされないことに注意することが重要です。つまり、Dependabot は引き続き誰でも無料で使用できます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;まず、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/working-with-dependabot/managing-dependabot-on-self-hosted-runners&quot;&gt;Dependabot Updates を使用したセルフホスト ランナーの管理に関するドキュメントを&lt;/a&gt;確認してください。&lt;!--Carlin ToDo: update link--&gt;&lt;/p&gt;
&lt;p&gt; dependabot を GitHub Actions ワークフローとして実行することの意味について詳しく知りたい場合は、 &lt;a href=&quot;https://github.blog/changelog/2024-04-22-dependabot-updates-on-actions-for-github-enterprise-cloud-and-free-pro-and-teams-users/&quot;&gt;変更ログと FAQ&lt;/a&gt;または、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/working-with-dependabot/about-dependabot-on-github-actions-runners&quot;&gt;Dependabot on Actions ドキュメント&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.blog/changelog/2024-05-02-dependabot-pull-requests-jobs-are-now-available-to-run-on-self-hosted-actions-runners&quot;&gt;「Dependabot プル リクエスト ジョブが自己ホスト型 GitHub Actions ランナーで実行できるようになりました」&lt;/a&gt;という投稿は&lt;a href=&quot;https://github.blog&quot;&gt;、 GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77856</post-id></item><item><title>Artifact Attestations パブリック ベータ版</title><link>https://github.blog/changelog/2024-05-02-artifact-attestations-public-beta</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 16:20:10 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-02-artifact-attestations-public-beta</guid><description>&lt;p&gt;Artifact Attestations public beta&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-02-artifact-attestations-public-beta&quot;&gt;Artifact Attestations public beta&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;アクションに基づいて構築するあらゆるものに対して改ざん防止のペーパートレイルを作成する&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds&quot;&gt;Artifact Attestations を&lt;/a&gt;使用すると、GitHub Actions でビルドに署名し、アーティファクトの出所情報を取得して、どこからでも検証できるようにします。管理するキーや PKI はなく、検証は&lt;a href=&quot;https://cli.github.com/manual/gh_attestation_verify&quot;&gt;GitHub CLI ツール&lt;/a&gt;で行われます。このソリューションは、ソフトウェア アーティファクトの署名を簡素化するオープン ソース プロジェクトである&lt;a href=&quot;https://www.sigstore.dev/&quot;&gt;Sigstore&lt;/a&gt;に基づいています。&lt;/p&gt;
&lt;p&gt; GitHub Actions ワークフローに来歴を追加するには、アーティファクトへのパスを指定して新しい attest-build-provenance アクションを呼び出すだけです。簡単な例を次に示します。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-yml&quot;&gt;permissions:
 id-token: write
 contents: read
 attestations: write

 #
 # (build your artifact)
 #

 - name: Generate artifact attestation
 uses: actions/attest-build-provenance@v1
 with:
 subject-path: &amp;#39;PATH/TO/ARTIFACT&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、CLI ツールを使用して確認します。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-sh&quot;&gt;gh attestation verify PATH/TO/ARTIFACT -o myorganization
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細については、&lt;a href=&quot;https://github.blog/2024-05-02-introducing-artifact-attestations-now-in-public-beta/&quot;&gt;ブログを&lt;/a&gt;チェックし、 &lt;a href=&quot;https://github.com/orgs/community/discussions/122028&quot;&gt;GitHub コミュニティ&lt;/a&gt;のディスカッションに参加してください。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.blog/changelog/2024-05-02-artifact-attestations-public-beta&quot;&gt;Artifact Attestations パブリック ベータ版&lt;/a&gt;の投稿は&lt;a href=&quot;https://github.blog&quot;&gt;、GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77855</post-id></item><item><title>シークレット スキャンの非プロバイダー パターンの新規および更新された監査ログ イベント</title><link>https://github.blog/changelog/2024-05-02-new-and-updated-audit-log-events-for-secret-scanning-non-provider-patterns</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 16:04:13 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-02-new-and-updated-audit-log-events-for-secret-scanning-non-provider-patterns</guid><description>&lt;p&gt;New and updated audit log events for secret scanning non-provider patterns&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-02-new-and-updated-audit-log-events-for-secret-scanning-non-provider-patterns&quot;&gt;New and updated audit log events for secret scanning non-provider patterns&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;シークレット スキャンの非プロバイダー パターンがリポジトリ、組織、またはエンタープライズ レベルで有効または無効になったときに、監査ログ イベントが作成されるようになりました。&lt;/p&gt;
&lt;p&gt;既存の&lt;code&gt;secret_scanning_alert&lt;/code&gt;イベントに&lt;code&gt;secret_type&lt;/code&gt;フィールドが含まれるようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/about-secret-scanning&quot;&gt;シークレットスキャンについて詳しく見る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/audit-log-events-for-your-organization&quot;&gt;組織の監査ログ イベントの詳細を確認する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この投稿&lt;a href=&quot;https://github.blog/changelog/2024-05-02-new-and-updated-audit-log-events-for-secret-scanning-non-provider-patterns&quot;&gt;「シークレット スキャンの非プロバイダー パターンの新しい監査ログ イベントと更新された監査ログ イベント」&lt;/a&gt;は、最初に&lt;a href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77852</post-id></item><item><title>GitHub アプリはクライアント ID を使用してインストール トークンを取得できるようになりました</title><link>https://github.blog/changelog/2024-05-01-github-apps-can-now-use-the-client-id-to-fetch-installation-tokens</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 02 May 2024 00:33:48 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-01-github-apps-can-now-use-the-client-id-to-fetch-installation-tokens</guid><description>&lt;p&gt;GitHub Apps can now use the client ID to fetch installation tokens&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-01-github-apps-can-now-use-the-client-id-to-fetch-installation-tokens&quot;&gt;GitHub Apps can now use the client ID to fetch installation tokens&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;GitHub アプリの開発者は、OAuth フローとインストール トークン フローの両方にクライアント ID を使用することで、アプリケーションを簡素化できます。&lt;/p&gt;
&lt;p&gt;これまで、GitHub アプリはアプリケーション ID とクライアント ID という 2 つの異なる ID を管理してきました。アプリケーション ID は JWT を作成するためにのみ使用され、その後、インストール トークンを取得するために使用されました。クライアント ID は、ユーザーのサインインとインストールの要求に OAuth フローで使用されます。これら 2 つの値は、アプリケーションと、開発者に不必要な摩擦を引き起こした場合にどちらを使用するかという問題を同様に識別します。 JWT を作成するときに、アプリケーション ID の代わりにクライアント ID を使用できるようになりました。&lt;/p&gt;
&lt;p&gt;現時点ではアプリケーション ID は非推奨ではなく、削除する予定もありません。ただし、将来の機能との互換性はクライアント ID の使用に依存するため、更新することをお勧めします。&lt;/p&gt;
&lt;p&gt;ここで許可される具体的な変更は、アプリがアプリケーションの秘密キーを所有していることを証明する JWT を作成するときに、 &lt;code&gt;iss&lt;/code&gt;クレームにクライアント ID を使用できることです。型付き言語を使用している場合、アプリケーション ID は&lt;code&gt;int&lt;/code&gt;ですが、クライアント ID は&lt;code&gt;string&lt;/code&gt;であることに注意してください。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-diff&quot;&gt;require &amp;#39;openssl&amp;#39;
 require &amp;#39;jwt&amp;#39; # https://rubygems.org/gems/jwt

 # Private key contents
 private_pem = File.read(&quot;YOUR_PATH_TO_PEM&quot;)
 private_key = OpenSSL::PKey::RSA.new(private_pem)

 # Generate the JWT
 payload = {
 # issued at time, 60 seconds in the past to allow for clock drift
 iat: Time.now.to_i - 60,
 # JWT expiration time (10 minute maximum)
 exp: Time.now.to_i + (10 * 60),
 --- # GitHub App&amp;#39;s App ID
 --- iss: &quot;12345&quot;
 +++ # GitHub App&amp;#39;s Client ID
 +++ iss: &quot;Iv23f8doAlphaNumer1c&quot;
 }

 jwt = JWT.encode(payload, private_key, &quot;RS256&quot;)
 puts jwt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Octokit はセットアップでアプリ ID の使用を依然として想定していることに注意してください。Octokit SDK はクライアント ID の使用をサポートするために将来更新される予定です。&lt;/p&gt;
&lt;p&gt;アプリケーションのクライアント ID は、設定ページで確認できます。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://github.com/github/release-assets/assets/1666363/b9066ab8-329f-46eb-8dad-816a0254db32&quot; alt=&quot;クライアント ID とアプリケーション ID の両方を示すアプリの設定のスクリーンショット&quot; /&gt;&lt;/p&gt;
&lt;p&gt;クライアント ID とアプリケーション ID は秘密ではなく、エンド ユーザーに表示されることが期待されています。この更新を行うときに ID の処理方法を変更する必要はありません。&lt;/p&gt;
&lt;p&gt; JWT を生成してインストール トークンを取得する方法の詳細については、 &lt;a href=&quot;https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app&quot;&gt;「GitHub アプリの JWT の生成」&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://github.blog/changelog/2024-05-01-github-apps-can-now-use-the-client-id-to-fetch-installation-tokens&quot;&gt;GitHub アプリでクライアント ID を使用してインストール トークンを取得できるようになった&lt;/a&gt;という投稿は&lt;a href=&quot;https://github.blog&quot;&gt;、 GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77844</post-id></item><item><title>監査ログ ストリーミング ヘルス チェックの一般提供が開始されました</title><link>https://github.blog/changelog/2024-05-01-audit-log-streaming-health-check-is-generally-available</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 01 May 2024 20:36:58 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2024-05-01-audit-log-streaming-health-check-is-generally-available</guid><description>&lt;p&gt;Audit Log Streaming Health Check is Generally Available&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://github.blog/changelog/2024-05-01-audit-log-streaming-health-check-is-generally-available&quot;&gt;Audit Log Streaming Health Check is Generally Available&lt;/a&gt; appeared first on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;GitHub の監査ログ ストリーミング ヘルス チェックが一般提供になりました。監査ログの健全性チェックの目的は、監査ログ ストリームがサイレントに失敗しないことを確認することです。 24 時間ごとに、ストリームごとにヘルスチェックが実行されます。ストリームが正しく設定されていない場合、監査ログ ストリームが正しく構成されていないことを通知する電子メールがエンタープライズ所有者に送信されます。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://github.com/github/release-assets/assets/95828167/739a812a-e3e6-48bc-a282-540e25c20877&quot; alt=&quot;ストリームの構成が間違っている場合の電子メール通知の例&quot; /&gt;&lt;/p&gt;
&lt;p&gt;ストリーミングされた監査ログは、GitHub.com に最大 7 日間保存されます。監査ログ イベントがストリームからドロップされないようにするには、電子メール通知から 6 日以内に構成が間違っているストリームを修正する必要があります。ストリーミング構成を修正するには、「&lt;a href=&quot;#setting-up-audit-log-streaming&quot;&gt;監査ログ ストリーミングの設定&lt;/a&gt;」で説明されている手順に従います。&lt;/p&gt;
&lt;p&gt;投稿&lt;a href=&quot;https://github.blog/changelog/2024-05-01-audit-log-streaming-health-check-is-generally-available&quot;&gt;「監査ログ ストリーミング ヘルス チェックが一般提供になりました」&lt;/a&gt; first appeared on &lt;a href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt; .&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">77829</post-id></item></channel></rss>