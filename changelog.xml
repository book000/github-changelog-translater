<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>GitHub Changelog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Thu, 15 Sep 2022 18:38:33 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.0.2</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>GitHub Changelog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>プル リクエストをスカッシュ マージするときに表示される Git コミット作成者</title><link>https://github.blog/changelog/2022-09-15-git-commit-author-shown-when-squash-merging-a-pull-request</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 15 Sep 2022 18:38:33 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-15-git-commit-author-shown-when-squash-merging-a-pull-request</guid><description>Git commit author shown when squash merging a pull request</description><content:encoded>&lt;p&gt;プル リクエストをスカッシュ マージするときに作成された Git コミットの作成者が、マージ前に表示されるようになりました。以前は、コミットの作成者は、マージ コミットとマージする場合にのみ表示されていました。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2503052/190267728-80ac3566-74eb-429f-9617-21fe374fb024.png?ssl=1&quot; alt=&quot;画像&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;また、プル リクエストをマージしているユーザーもそれを開き、複数のメール アドレスが構成されている場合、ドロップダウンで、コミットの作成者に使用する別のメール アドレスを選択できるようになりました。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2503052/190268155-c369f6cc-584e-4d3d-9051-20e15317104a.png?ssl=1&quot; alt=&quot;画像&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;これらの改善は、スカッシュ マージによって作成された Git コミットが正しいメール アドレスに関連付けられるように設計されています。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request&quot;&gt;プル リクエストのマージの&lt;/a&gt;詳細については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67083</post-id></item><item><title>GitHub スポンサー: 「カスタム金額」設定の変更通知</title><link>https://github.blog/changelog/2022-09-13-github-sponsors-change-notice-for-the-custom-amount-setting</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 13 Sep 2022 17:28:04 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-13-github-sponsors-change-notice-for-the-custom-amount-setting</guid><description>GitHub Sponsors&amp;#058; change notice for the &apos;custom amount&apos; setting</description><content:encoded>&lt;p&gt;スポンサー メンテナーを合理化するために、GitHub スポンサーのカスタム金額設定を変更しています。 2022 年 10 月 3 日以降、すべてのスポンサー プロファイルでカスタム金額がデフォルトで有効になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;その日に、以前にカスタム金額を有効にしていない場合、最小カスタム金額は、公開されている月間レベルの最低額または公開されている 1 回限りの最低レベルのいずれか高い方に設定されます。最小額を変更したい場合は、スポンサー ダッシュボードでカスタム金額を有効にし (まだ有効になっていない場合)、希望する最小額に設定できます。&lt;/li&gt;
&lt;li&gt; 2022 年 10 月 3 日より前に最小カスタム金額を設定した場合、その金額は変更されません。 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/82317/189940509-2238781e-46a6-4ffa-b495-354c8c8a9b38.png?ssl=1&quot; alt=&quot;メンテナー向けの GitHub Sponsors ダッシュボードのカスタム スポンサーシップ金額設定&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67058</post-id></item><item><title>GitHub for iOS: プル リクエストでファイルを編集する</title><link>https://github.blog/changelog/2022-09-13-github-for-ios-edit-files-in-pull-requests</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 13 Sep 2022 15:58:02 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-13-github-for-ios-edit-files-in-pull-requests</guid><description>GitHub for iOS&amp;#058; Edit files in pull requests</description><content:encoded>&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/59900904/187802767-c118b51d-581d-4a90-a01d-e0434d980b1d.png?ssl=1&quot; alt=&quot;GitHub for iOS のプル リクエスト機能でファイルを編集することを知らせるバナー&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://apps.apple.com/us/app/github/id1477376905&quot;&gt;GitHub for iOS&lt;/a&gt;のプルリクエスト内に「ファイル編集」を導入！マージする前に、既存のプル リクエストをすばやく更新して、厄介なタイプミスを修正したり、不足しているメソッドを追加したりします。 &lt;/p&gt;
&lt;div style=&quot;width: 640px;&quot; class=&quot;wp-video&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script&gt;document.createElement(&apos;video&apos;);&lt;/script&gt;&lt;![endif]--&gt;
&lt;video class=&quot;wp-video-shortcode js-viewport-aware-video events-none&quot; id=&quot;video-67053-1&quot; width=&quot;640&quot; height=&quot;360&quot; loop=&quot;1&quot; autoplay=&quot;1&quot; preload=&quot;metadata&quot; muted=&quot;1&quot;&gt;&lt;source type=&quot;video/mp4&quot; src=&quot;https://user-images.githubusercontent.com/59900904/189217787-1562c709-c1cb-44a1-8016-071ca353bc77.mp4?_=1&quot; /&gt; &lt;a href=&quot;https://user-images.githubusercontent.com/59900904/189217787-1562c709-c1cb-44a1-8016-071ca353bc77.mp4&quot;&gt;https://user-images.githubusercontent.com/59900904/189217787-1562c709-c1cb-44a1-8016-071ca353bc77.mp4&lt;/a&gt;&lt;/video&gt;&lt;/div&gt;
&lt;p&gt; GitHub for Android 内でのプル リクエストのファイル編集は、今年後半に提供される予定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mobile&quot;&gt;モバイル用 GitHub の詳細&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://apps.apple.com/app/github/id1477376905?ls=1&quot;&gt;iOS 用 GitHub を今すぐダウンロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コミュニティ ディスカッションの会話に参加して、この機能やその他の GitHub Mobile 機能に関する&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/mobile&quot;&gt;フィードバックをお送りください&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67053</post-id></item><item><title>merge-ort 戦略を使用して作成されたマージコミット</title><link>https://github.blog/changelog/2022-09-12-merge-commits-now-created-using-the-merge-ort-strategy</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 12 Sep 2022 21:21:38 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-12-merge-commits-now-created-using-the-merge-ort-strategy</guid><description>Merge commits now created using the merge-ort strategy</description><content:encoded>&lt;p&gt;GitHub がマージ コミットを作成するとき、たとえばプル リクエストを正常にマージできるかどうかをテストしたり、プル リクエストを実際にマージしたりするために、 &lt;a href=&quot;https://github.blog/2021-08-16-highlights-from-git-2-33/#merge-ort-a-new-merge-strategy&quot;&gt;&lt;code&gt;merge-ort&lt;/code&gt;&lt;/a&gt;戦略を使用するようになりました。 &lt;code&gt;merge-ort&lt;/code&gt;は比較的新しい Git マージ戦略であり、大幅に高速化され (たとえば、以前は作成に 5 秒以上かかっていた複雑なマージ コミットが 200 ミリ秒未満で作成されるようになりました)、 &lt;code&gt;merge-recursive&lt;/code&gt;で見つかった微妙な正確性の問題に対処します。ストラテジー。また、Git の最新リリースでは、 &lt;code&gt;merge-ort&lt;/code&gt;がデフォルトのマージ戦略であるため、ローカル マシンと GitHub の間でマージ結果がより予測可能になり、一貫性が保たれます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://git-scm.com/docs/merge-strategies#Documentation/merge-strategies.txt-ort&quot;&gt;Git の&lt;code&gt;merge-ort&lt;/code&gt;戦略&lt;/a&gt;と&lt;a href=&quot;https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github&quot;&gt;プル リクエストのマージ方法&lt;/a&gt;の詳細については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67051</post-id></item><item><title>新しい監査ログ イベントとイベント コンテキスト</title><link>https://github.blog/changelog/2022-09-09-new-audit-log-events-and-event-context</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 09 Sep 2022 20:36:33 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-09-new-audit-log-events-and-event-context</guid><description>New Audit Log events and event context</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization&quot;&gt;GitHub の監査ログ&lt;/a&gt;を使用すると、管理者はエンタープライズのメンバーが実行したアクションをすばやく確認できます。誰がアクションを実行したか、アクションの内容、いつ実行されたかなどの詳細が含まれます。監査ログを効果的なセキュリティおよびコンプライアンス ツールとして使用できるようにするために、GitHub は常に新しい監査ログ イベントを評価し、それらのイベントに意味のあるコンテキストを提供するために必要なフィールドがあることを確認しています。 GitHub は、エンタープライズ監査ログに対して次の機能強化を行いました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;business.sso_response&lt;/code&gt;および&lt;code&gt;org.sso_response&lt;/code&gt;イベントは、GitHub Enterprise Cloud (GHEC) および GitHub Enterprise Server (GHES) バージョン 3.8 以降の REST API および監査ログ ストリーミング ペイロードに表示されます。&lt;/li&gt;
&lt;li&gt; &lt;code&gt;repo.rename&lt;/code&gt; 、 &lt;code&gt;project.rename&lt;/code&gt; 、および&lt;code&gt;protected_branch.update_name&lt;/code&gt;イベントに&lt;code&gt;old_name&lt;/code&gt;フィールドが含まれるようになり、名前が変更されたリポジトリ、プロジェクト、および保護されたブランチの現在および過去の名前が明確になります。&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66995</post-id></item><item><title>GitHub アクション: workflow_dispatch および repository_dispatch で GITHUB_TOKEN を使用する</title><link>https://github.blog/changelog/2022-09-08-github-actions-use-github_token-with-workflow_dispatch-and-repository_dispatch</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 08 Sep 2022 16:34:03 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-08-github-actions-use-github_token-with-workflow_dispatch-and-repository_dispatch</guid><description>GitHub Actions&amp;#058; Use `GITHUB_TOKEN` with workflow_dispatch and repository_dispatch</description><content:encoded>&lt;p&gt;お客様は、ワークフローをトリガーするために、 &lt;code&gt;workflow_dispatch&lt;/code&gt;および&lt;code&gt;repository_dispatch&lt;/code&gt;イベントで&lt;code&gt;GITHUB_TOKEN&lt;/code&gt;を使用できるようになりました。この変更の前は、 &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;によってトリガーされたイベントは、新しいワークフローの実行を作成しませんでした。これは、無限のワークフローが誤ってトリガーされるのを防ぐために行われました。今回の更新では、 &lt;code&gt;workflow_dispatch&lt;/code&gt;および&lt;code&gt;repository_dispatch&lt;/code&gt;イベントは例外となります。これは、これらのイベントが顧客による明示的な呼び出しであり、ループに陥る可能性が低いためです。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-yaml&quot;&gt;name: Create Workflow Dispatch

 on:
 workflow_dispatch:

 jobs:
 build:
 runs-on: ubuntu-latest
 steps:
 - name: Trigger Workflow
 uses: actions/github-script@v6
 with:
 script: |
 github.rest.actions.createWorkflowDispatch({
 owner: context.repo.owner,
 repo: context.repo.repo,
 workflow_id: &amp;#39;test.yml&amp;#39;,
 ref: &amp;#39;main&amp;#39;,
 })&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細については、&lt;br /&gt;
 &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow&quot;&gt;ワークフローからのワークフローのトリガー&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;質問がある場合&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/actions-and-packages&quot;&gt;は、GitHub Actions コミュニティ にアクセスしてください&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt; Actions の次の予定を確認するには&lt;a href=&quot;https://github.com/orgs/github/projects/4247/views/1?filterQuery=actions&quot;&gt;、パブリック ロードマップ にアクセスしてください&lt;/a&gt;。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66960</post-id></item><item><title>Dependabot は、npm プロジェクトの推移的な依存関係のロックを解除します</title><link>https://github.blog/changelog/2022-09-07-dependabot-unlocks-transitive-dependencies-for-npm-projects</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 07 Sep 2022 23:24:10 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-07-dependabot-unlocks-transitive-dependencies-for-npm-projects</guid><description>Dependabot unlocks transitive dependencies for npm projects</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-alerts/configuring-dependabot-alerts&quot;&gt;Dependabot アラートが有効&lt;/a&gt;で、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-security-updates/configuring-dependabot-security-updates#managing-dependabot-security-updates-for-your-repositories&quot;&gt;Dependabot セキュリティ更新が有効&lt;/a&gt;になっている GitHub リポジトリは、脆弱な&lt;code&gt;npm&lt;/code&gt;の推移的な依存関係に対する Dependabot プル リクエストを自動的に生成します。&lt;/p&gt;
&lt;p&gt;以前は、親の依存関係に互換性のない&lt;a href=&quot;https://docs.npmjs.com/about-semantic-versioning&quot;&gt;特定のバージョン範囲&lt;/a&gt;が必要な場合、Dependabot は推移的な依存関係のセキュリティ更新プログラムを生成できませんでした。このロックされた状態では、開発者は親および推移的な依存関係を手動でアップグレードする必要がありました。&lt;/p&gt;
&lt;p&gt;これで、Dependabot は、親と子の両方の依存関係を一緒にアップグレードする npm プロジェクトのプル リクエストを作成できるようになります。&lt;/p&gt;
&lt;p&gt;たとえば、推移的な依存関係&lt;code&gt;node-forge&lt;/code&gt;の脆弱性が Dependabot アラートをトリガーし、PR の作成を許可する場合: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/358008/188993309-245ccf53-c07b-4ac4-9a40-4f0db0144340.png?ssl=1&quot; alt=&quot;2 生成されたセキュリティ アップデート ホワイト バック&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;この変更の前に、Dependabot は推移的な依存関係のための Dependabot セキュリティ アップデートの作成に失敗していました:confused:。もうそうじゃない！ &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f600.png&quot; alt=&quot;😀&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;現在、Dependabot は、同じプル リクエスト内で「node-forge 依存関係」にパッチを適用することに加えて、親の&lt;code&gt;webpack-dev-server&lt;/code&gt;バージョンをバンプすることにより、 &lt;code&gt;node-forge&lt;/code&gt;セキュリティ アップデートのロックを解除します! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/358008/188993334-6ff228d1-071c-48b4-842d-e79e9151955f.png?ssl=1&quot; alt=&quot;3更新PR白背景&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;この変更は、脆弱な&lt;code&gt;npm&lt;/code&gt;パッケージを更新する Dependabot によって生成されたプル リクエストに適用されます。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66901</post-id></item><item><title>カスタム リポジトリ ロール作成 API がパブリック ベータで利用可能になりました</title><link>https://github.blog/changelog/2022-09-07-custom-repository-role-creation-apis-are-now-available-in-public-beta</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 07 Sep 2022 21:24:30 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-07-custom-repository-role-creation-apis-are-now-available-in-public-beta</guid><description>Custom repository role creation APIs are now available in public beta</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization&quot;&gt;カスタム リポジトリ ロール&lt;/a&gt;を使用すると、エンタープライズ組織の管理者は、標準の読み取り、トリアージ、書き込み、保守、および管理のロールを超えて、リポジトリに最小権限のロールを定義して割り当てることができます。&lt;/p&gt;
&lt;p&gt;現在、カスタム リポジトリ ロールを作成および更新するための REST API エンドポイントが、GitHub Enterprise Cloud のお客様向けのパブリック ベータ版で利用可能です。これらの新しいエンドポイントは、既存のカスタム リポジトリ ロール API に基づいて構築されており、これらのロールを&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/rest/teams/teams#add-or-update-team-repository-permissions&quot;&gt;チーム&lt;/a&gt;または&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/rest/collaborators/collaborators#add-a-repository-collaborator&quot;&gt;ユーザー&lt;/a&gt;に割り当てることができます。エンドポイントは、組織管理者からの PAT と、適切に承認された OAuth および GitHub アプリからの呼び出しを受け入れます。&lt;/p&gt;
&lt;p&gt;これらの REST API は、GitHub Enterprise Cloud で一般公開された後、GitHub Enterprise Server 3.8 でサポートされます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/rest/orgs/custom-roles&quot;&gt;カスタム リポジトリ ロールをプログラムで作成する方法&lt;/a&gt;について詳しくは、こちらをご覧ください。&lt;/p&gt;
&lt;p&gt;アカウント チームを通じて、または&lt;a href=&quot;https://github.com/community/community/discussions/32250&quot;&gt;コミュニティ ディスカッション ボードのトピック&lt;/a&gt;でフィードバックをお寄せください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66900</post-id></item><item><title>既存のブランチを課題にリンクする</title><link>https://github.blog/changelog/2022-09-07-link-existing-branches-to-an-issue</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 07 Sep 2022 17:13:57 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-07-link-existing-branches-to-an-issue</guid><description>Link existing branches to an issue</description><content:encoded>&lt;p&gt;イシューの開発セクションで、既存のブランチ (またはプル リクエスト) をそのイシューにリンクできるようになりました。 &lt;a href=&quot;https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#manually-linking-a-pull-request-or-branch-to-an-issue-using-the-issue-sidebar&quot;&gt;ブランチを課題に手動でリンクする方法&lt;/a&gt;については、こちらをご覧ください。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/3369400/188875100-ca7ba34c-581e-40c9-9304-adf0f39408f0.gif?ssl=1&quot; alt=&quot;イシューでブランチをリンクする方法を示すアニメーション イメージ。リンクされたブランチは、開発セクションに表示されます。&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66897</post-id></item><item><title>コミット メッセージからプル リクエストの説明をより適切に提案する</title><link>https://github.blog/changelog/2022-09-07-better-suggested-pull-request-description-from-commit-message</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 07 Sep 2022 12:17:28 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-09-07-better-suggested-pull-request-description-from-commit-message</guid><description>Better suggested pull request description from commit message</description><content:encoded>&lt;p&gt;1 つのコミットのみを含む比較からプル リクエストを開くと、GitHub はデフォルトでタイトルと説明をそのコミットのメッセージの件名と本文に設定します。広く受け入れられて&lt;a href=&quot;https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines&quot;&gt;いる 1 行あたり 72 文字で折り返す&lt;/a&gt;という規則に従って、&lt;a href=&quot;https://github.blog/2022-06-30-write-better-commits-build-better-projects/&quot;&gt;詳細な git コミット メッセージ&lt;/a&gt;を作成する作成者は、 &lt;a href=&quot;https://github.github.com/gfm&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;が改行を処理する方法が原因で、奇妙な書式設定になる可能性があることに気付いたかもしれません。&lt;/p&gt;
&lt;p&gt;プル リクエストの説明を提案する際に、コミット メッセージを自動的に再フォーマットするようになりました。これにより、github.com、GitHub Mobile、およびその他のツールで表示したときに元のコミット メッセージと同じように表示されます。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/677224/188730177-ec277773-313f-42e1-8b3a-6cd90734ce65.png?ssl=1&quot; alt=&quot;変更前後のPR公開イメージ&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request&quot;&gt;プル リクエストの作成の詳細&lt;/a&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66882</post-id></item></channel></rss>