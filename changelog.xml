<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>GitHub Changelog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Thu, 20 Oct 2022 21:45:59 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.0.3</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>GitHub Changelog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>増分開発コンテナの再構築</title><link>https://github.blog/changelog/2022-10-20-incremental-dev-container-rebuild</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 21:45:59 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-incremental-dev-container-rebuild</guid><description>Incremental Dev Container Rebuild</description><content:encoded>&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers&quot;&gt;dev コンテナーを使用して Codespaces の構成を&lt;/a&gt;構築する場合、デフォルトの動作でインクリメンタル リビルドが実行されるようになりました。コンテナーの完全な再構築がオプションになりました。&lt;/p&gt;
&lt;p&gt;増分再構築は、既存の Docker キャッシュの上に構築され、再構築間で共通のイメージとレイヤーを再利用するため、はるかに高速です。これは、非常に大きな Codespaces のデフォルト コンテナに構成を追加するとすぐにわかります。&lt;/p&gt;
&lt;p&gt; VS Code を使用する場合、コマンド パレットからこれらのコマンドにアクセスします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/196991032-e2b391b6-6423-49cb-911f-acd3a78de1cb.png?ssl=1&quot; alt=&quot;Visual Studio Code のコマンド パレットでコマンドを再構築します。&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;この変更前の再構築の動作は完全再構築でした。これは遅くなりますが、変更されていないイメージを再プルする前に仮想マシンからすべてのイメージを削除するため、正確性が保証されます。構成の繰り返しが多く、ディスク領域を解放したい場合や、構成からコードスペースをクリーンに作成する際に存在しないレイヤーに構成が依存しないようにしたい場合に、これを実行したい場合があります。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68107</post-id></item><item><title>Web インターフェイスからアクション ワークフローのキャッシュを管理する</title><link>https://github.blog/changelog/2022-10-20-manage-caches-in-your-actions-workflows-from-web-interface</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 19:57:58 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-manage-caches-in-your-actions-workflows-from-web-interface</guid><description>Manage caches in your Actions workflows from Web Interface</description><content:encoded>&lt;p&gt;依存関係やその他の一般的に再利用されるファイルをキャッシュすることで、開発者は GitHub Actions ワークフローを高速化し、より効率的にすることができます。&lt;br /&gt;
 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/caching-dependencies-to-speed-up-workflows#managing-caches&quot;&gt;Web インターフェースからキャッシュ管理&lt;/a&gt;を有効にして、開発者が GitHub リポジトリ内でキャッシュの使用をより透過的に制御できるようにしました。&lt;/p&gt;
&lt;p&gt;アクション&lt;a href=&quot;https://github.com/actions/cache&quot;&gt;/キャッシュ&lt;/a&gt;を使用するアクション ユーザーは、次のことができるようになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリのすべてのキャッシュ エントリのリストを表示します。&lt;/li&gt;
&lt;li&gt;キャッシュ サイズ、作成時間、最終アクセス時間などの特定のメタデータを使用して、キャッシュのリストをフィルター処理および並べ替えます。&lt;/li&gt;
&lt;li&gt;破損または古いキャッシュ エントリを削除する&lt;/li&gt;
&lt;li&gt;リポジトリと組織の集約キャッシュの使用状況を監視します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在有効になっているキャッシュ管理 UX に加えて、&lt;a href=&quot;https://docs.github.com/en/rest/actions/cache&quot;&gt;キャッシュ API&lt;/a&gt;を使用するか&lt;a href=&quot;https://github.com/actions/gh-actions-cache#readme&quot;&gt;、Actions キャッシュ用の GitHub CLI 拡張機能を&lt;/a&gt;インストールして、ターミナルからキャッシュを管理することもできます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows&quot;&gt;Actions ワークフローを高速化するための依存関係キャッシュ&lt;/a&gt;の詳細については、こちらをご覧ください。&lt;br /&gt;
質問がある場合、またはフィードバックを共有するに&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/actions-and-packages&quot;&gt;は、GitHub Actions コミュニティ にアクセスして&lt;/a&gt;ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68106</post-id></item><item><title>Dependabot は、Yarn v2 および v3 のセキュリティとバージョンの更新を生成できるようになりました</title><link>https://github.blog/changelog/2022-10-20-dependabot-can-now-generate-security-and-version-updates-for-yarn-v2-and-v3</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 17:20:05 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-dependabot-can-now-generate-security-and-version-updates-for-yarn-v2-and-v3</guid><description>Dependabot can now generate security and version updates for Yarn v2 and v3</description><content:encoded>&lt;p&gt;Dependabot は、Yarn v2 および Yarn v3 マニフェスト ( &lt;code&gt;package.json&lt;/code&gt;および&lt;code&gt;yarn.lock&lt;/code&gt;ファイル) の依存関係を更新するためのサポートを追加しました。これは、Yarn v1 の既存のサポートに追加されます。 Dependabot のセキュリティ アップデートが有効になっている既存のリポジトリに必要なアクションはありませんが、Dependabot のバージョン アップデートでプロアクティブなアップデートを受け取りたい場合は、 &lt;code&gt;npm&lt;/code&gt;エコシステムの設定を&lt;code&gt;dependabot.yml&lt;/code&gt;ファイルに追加する必要があります。&lt;/p&gt;
&lt;p&gt;詳細については：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates&quot;&gt;Dependabot のバージョン更新の構成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates#supported-repositories-and-ecosystems&quot;&gt;Dependabot がサポートするエコシステムとパッケージ マネージャー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68102</post-id></item><item><title>Codespaces は、コンテナー イメージを制限する組織ポリシーを提供するようになりました</title><link>https://github.blog/changelog/2022-10-20-codespaces-now-offers-an-organizational-policy-to-restrict-container-images</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 17:17:43 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-codespaces-now-offers-an-organizational-policy-to-restrict-container-images</guid><description>Codespaces now offers an organizational policy to restrict container images</description><content:encoded>&lt;p&gt;コンテナー イメージを制限する組織レベルのポリシーにより、組織管理者は、組織所有のコードスペースを作成する際に使用する基本コンテナー イメージを制御できるようになりました。これにより、管理者は、検証済みのコンテナー イメージのみが組織所有のコードスペースの作成に使用されていることを確認できます。 &lt;br /&gt;
&lt;img alt=&quot;許可された画像ポリシーのスクリーンショット&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/30297258/196299994-9d413e42-d36b-4e7d-9679-e3e61efc020f.png?w=602&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;組織管理者は、組織所有のコードスペースを作成する際に、使用を許可するイメージやイメージ ソースを指定できます。開発コンテナ構成で指定されたイメージが許可されたイメージのいずれとも一致しない場合、以降のコードスペースの作成は失敗し、 &lt;a href=&quot;https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/introduction-to-dev-containers#devcontainerjson&quot;&gt;構成内のイメージを更新するよう求められます&lt;/a&gt;。基本イメージ ポリシーは、既定のイメージ、またはコンテナーの再構築を妨げるエラーが開発コンテナー構成に導入された場合にコードスペースを回復するために使用されるイメージには適用されません。&lt;/p&gt;
&lt;p&gt;このリリースでは、イメージ ポリシーは codespace の作成時に適用され、コンテナーの再構築時には適用されません。再構築シナリオのサポートは近日公開予定です。このポリシーと、 &lt;a href=&quot;https://github.com/github/feedback/discussions/categories/codespaces-feedback&quot;&gt;Codespaces ディスカッション&lt;/a&gt;のシナリオに役立つその他のポリシーに関するフィードバックをお待ちしております。&lt;/p&gt;
&lt;p&gt;詳細について&lt;a href=&quot;https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/restricting-the-base-image-for-codespaces&quot;&gt;は、組織所有のコードスペースのベース イメージの制限&lt;/a&gt;を参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68101</post-id></item><item><title>Codespaces シンプル ブラウザの紹介</title><link>https://github.blog/changelog/2022-10-20-introducing-the-codespaces-simple-browser</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 16:53:04 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-introducing-the-codespaces-simple-browser</guid><description>Introducing the Codespaces Simple Browser&quot;</description><content:encoded>&lt;h3 id=&quot;preview-changes-in-your-web-editor&quot; id=&quot;preview-changes-in-your-web-editor&quot; &gt;Web エディターで変更をプレビュー&lt;a href=&quot;#preview-changes-in-your-web-editor&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Preview Changes in Your Web Editor&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;コードスペースでアプリケーションを起動して、実行中のアプリケーションがブラウザのタブの海で迷子になったことはありませんか?本日、実行中のアプリケーションを Web エディターで直接プレビューできる機能を発表します。&lt;/p&gt;
&lt;h3 id=&quot;update-your-preview-url&quot; id=&quot;update-your-preview-url&quot; &gt;プレビュー URL を更新する&lt;a href=&quot;#update-your-preview-url&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Update your Preview URL&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;この機能をサポートするには、プレビューされたアプリケーションの URL を&lt;code&gt;-.preview.app.github.dev&lt;/code&gt;から&lt;code&gt;-.githubpreview.dev&lt;/code&gt;に変更する必要がありました。これは破壊的変更となる可能性があります。プロジェクトで&lt;code&gt;.githubpreview.dev&lt;/code&gt;プレビュー URL に依存している場合は、新しい URL 形式を反映するようにコードを更新する必要があります。&lt;/p&gt;
&lt;p&gt;または、環境変数&lt;code&gt;GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN&lt;/code&gt;を使用すると、アプリケーションが転送するドメインにアクセスできます。これにより、プレビュー URL をハードコーディングした任意の場所にこの変数をコーディングできるようになります。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68100</post-id></item><item><title>GitHub アクション: 大規模なホスト型ランナーが顧客向けに自動的に作成されるようになりました</title><link>https://github.blog/changelog/2022-10-20-github-actions-larger-hosted-runners-are-now-automatically-created-for-customers</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 15:44:56 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-github-actions-larger-hosted-runners-are-now-automatically-created-for-customers</guid><description>GitHub Actions&amp;#058; larger hosted runners are now automatically created for customers</description><content:encoded>&lt;p&gt;本日より、お客様は事前構成作業なしでより大きなランナーを楽しむことができるようになりました。 GitHub は、最も一般的なサイズの 4 つのより大きなランナーで構成されたデフォルトのランナー グループを自動的に作成するようになったため、ユーザーはより大きなランナーをすぐに使い始めることができます。&lt;/p&gt;
&lt;p&gt;デフォルトのランナー グループは「Default Larger Runners」と呼ばれ、 &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/actions/using-github-hosted-runners/controlling-access-to-larger-runners&quot;&gt;組織またはエンタープライズの管理者&lt;/a&gt;が管理できます。これらのランナーの使用を開始するには、選択したランナーに対応するラベルをワークフロー ファイルに追加するだけです。&lt;/p&gt;
&lt;div class=&quot;content-table-wrap&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;th&gt;ラベル&lt;/th&gt;
&lt;th&gt;画像&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4 コア Ubuntu ランナー&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu-latest-4-cores&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; Ubuntu – 最新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8 コア Ubuntu ランナー&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu-latest-8-cores&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; Ubuntu – 最新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16 コアの Ubuntu ランナー&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ubuntu-latest-16-cores&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; Ubuntu – 最新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8 コア Windows ランナー&lt;/td&gt;
&lt;td&gt;&lt;code&gt;windows-latest-8-cores&lt;/code&gt;&lt;/td&gt;
&lt;td&gt; Windows Server – 最新&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;より大きなホスト型ランナーについてもっと知りたいですか? &lt;a href=&quot;https://github.blog/changelog/2022-09-01-github-actions-larger-runners-are-now-in-public-beta/&quot;&gt;ここ&lt;/a&gt;で発表を読むか、&lt;a href=&quot;https://github.com/features/github-hosted-runners/signup&quot;&gt;ここ&lt;/a&gt;でベータ版にサインアップしてください&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68007</post-id></item><item><title>新しいブランチ保護: ラスト プッシャーとロックされたブランチ</title><link>https://github.blog/changelog/2022-10-20-new-branch-protections-last-pusher-and-locked-branch</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 20 Oct 2022 15:34:58 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-20-new-branch-protections-last-pusher-and-locked-branch</guid><description>New Branch Protections: Last Pusher and Locked Branch</description><content:encoded>&lt;p&gt;本日、2 つの新しいブランチ プロテクションをリリースします。 &lt;/p&gt;
&lt;h2 id=&quot;require-approval-from-someone-other-than-the-last-pusher&quot; id=&quot;require-approval-from-someone-other-than-the-last-pusher&quot; &gt;最後のプッシャー以外の承認が必要&lt;a href=&quot;#require-approval-from-someone-other-than-the-last-pusher&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Require approval from someone other than the last pusher&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;プル リクエストをマージする前に、最後のプッシャー以外の誰かによる承認を要求できるようになりました。&lt;br /&gt;
つまり、変更をプッシュした最新のユーザーは、承認が&lt;strong&gt;必要&lt;/strong&gt;なブランチの保護に関係なく、プル リクエストの承認が必要になります。または、1 つの承認が必要な場合は、最後に変更をプッシュしたユーザー以外のユーザーも承認する必要があります。承認が最後のプッシャー以外からのものである場合、それら 2 つの承認で十分です。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/7575792/192617310-199159c2-b5bc-48ab-a6e2-f392e58441a4.png?ssl=1&quot; alt=&quot;ラスト プッシュ保護が有効になっているスクリーンショット。&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;lock-branch&quot; id=&quot;lock-branch&quot; &gt;ロックブランチ&lt;a href=&quot;#lock-branch&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Lock branch&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;これにより、ブランチをロックして変更を禁止できます。ブランチをロックして、メンテナンス ウィンドウを設けて変更を防止したり、フォークを保護してアップストリーム リポジトリからの変更のみを受け取るようにすることができます。&lt;/p&gt;
&lt;p&gt;この機能をブランチ保護ルールで使用するには、 &lt;strong&gt;Lock branch&lt;/strong&gt;を有効にします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/7575792/196246562-59b7b156-a180-4830-ae67-d202ec49f172.png?ssl=1&quot; alt=&quot;フォーク同期が有効になっている Lock ブランチのスクリーンショット&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;詳細については、GitHub ドキュメントの&lt;a href=&quot;https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings&quot;&gt;保護されたブランチについて&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt; GitHub の&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/repositories&quot;&gt;パブリック フィードバック ディスカッション&lt;/a&gt;で、このトピックやその他のトピックに関するフィードバックをお待ちしております。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">68006</post-id></item><item><title>Slack の GitHub アプリ – 問題の作成と管理のエクスペリエンス</title><link>https://github.blog/changelog/2022-10-19-github-app-in-slack-issue-create-and-manage-experience</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 19 Oct 2022 14:32:37 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-19-github-app-in-slack-issue-create-and-manage-experience</guid><description>GitHub app in Slack - Issue create and manage experience</description><content:encoded>&lt;p&gt;Slack の GitHub アプリに多数の新機能を追加したことをお知らせできることを嬉しく思います。 GitHub の問題を Slack から直接作成、追跡、管理できるようになりました。&lt;/p&gt;
&lt;h3 id=&quot;create-issues-as-you-collaborate&quot; id=&quot;create-issues-as-you-collaborate&quot; &gt;コラボレーションしながら課題を作成&lt;a href=&quot;#create-issues-as-you-collaborate&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Create issues as you collaborate&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;チームと対話する場所、つまりチャネル、個人用アプリ、グループ、または直接チャットから、クリックするだけで問題を作成できるようになりました。 &lt;br /&gt;
&lt;img alt=&quot;画像&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/25578249/196711678-30af4ab7-5cbc-4d3b-a1e9-f38abd0cb0e1.png?w=1023&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;チャットの内容は、slack の会話へのリンクと共に説明に自動的に追加されます。&lt;/li&gt;
&lt;li&gt;チャネルで最後に使用されたリポジトリが自動的に入力されます。ただし、必要に応じて先に進んでリポジトリに変更することができます。&lt;/li&gt;
&lt;li&gt;問題を作成するときに、必要に応じてラベル、担当者、およびマイルストーンを入力できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;問題が作成されると、問題を作成したチャネル/チャットで確認カードを受け取ります。&lt;/p&gt;
&lt;h3 id=&quot;issue-card-updates-and-threading&quot; id=&quot;issue-card-updates-and-threading&quot; &gt;問題カードの更新とスレッド&lt;a href=&quot;#issue-card-updates-and-threading&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Issue card updates and threading&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; Slack から直接課題を更新することもできます。 Slack で問題通知カードを表示すると、コメント、編集、クローズ/再開できるようになりました。 &lt;br /&gt;
&lt;img alt=&quot;画像&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/25578249/196716281-83f4dcee-b9c5-4b9f-aaaf-01c0d81e6f69.png?w=1023&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;この機能強化の一環として、スレッド機能も導入しました。問題の通知は、返信として親カードの下にグループ化されます。スレッドはコンテキストを提供し、チャネルのノイズを減らし、コラボレーションを改善するのに役立ちます。&lt;/p&gt;
&lt;p&gt;これらの機能強化の詳細については、 &lt;a href=&quot;https://github.com/integrations/slack/blob/main/README.md&quot;&gt;Slack&lt;/a&gt;の GitHub アプリ ガイダンスを参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67985</post-id></item><item><title>GitHub Actions:OpenID Connect のサポートが強化され、大規模なセキュアなクラウド デプロイが可能になりました</title><link>https://github.blog/changelog/2022-10-18-github-actionsopenid-connect-support-enhanced-to-enable-secure-cloud-deployments-at-scale</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 18 Oct 2022 23:18:38 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-18-github-actionsopenid-connect-support-enhanced-to-enable-secure-cloud-deployments-at-scale</guid><description>GitHub Actions&amp;#058;OpenID Connect support enhanced to enable secure cloud deployments at scale</description><content:encoded>&lt;p&gt;GitHub Actions での OpenID Connect (OIDC) サポートにより、デプロイごとに自動的にローテーションされる有効期間の短いトークンを使用して、安全なクラウド デプロイが可能になります。&lt;/p&gt;
&lt;p&gt;拡張された OIDC サポートを使用して、組織レベルまたはリポジトリ レベルでカスタマイズ テンプレートを定義することにより、OIDC トークン内の&lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#customizing-the-subject-claims-for-an-organization-or-repository&quot;&gt;&lt;code&gt;subject&lt;/code&gt;クレーム形式を構成&lt;/a&gt;できるようになりました。構成が完了すると、各デプロイ中に生成される新しい OIDC トークンはカスタム形式に従います。&lt;/p&gt;
&lt;p&gt;これにより、組織とリポジトリの管理者は、コンプライアンスとセキュリティのニーズに合ったクラウド展開ワークフロー全体で OIDC 構成を標準化できます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments&quot;&gt;OpenID Connect を使用して GitHub ワークフローを強化するセキュリティの&lt;/a&gt;詳細については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67984</post-id></item><item><title>Dependabot が組織レベルの REST API にアラートを出す</title><link>https://github.blog/changelog/2022-10-18-dependabot-alerts-organizational-level-rest-api</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 18 Oct 2022 17:46:00 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-10-18-dependabot-alerts-organizational-level-rest-api</guid><description>Dependabot alerts organizational-level REST API</description><content:encoded>&lt;p&gt;REST API を使用して、GitHub 組織レベルですべての Dependabot アラートを取得できるようになりました。この新しい API エンドポイントは、最近導入された&lt;a href=&quot;https://github.blog/changelog/2022-09-22-dependabot-alerts-rest-api-is-now-available-in-public-beta/&quot;&gt;Dependabot アラート REST API&lt;/a&gt;と&lt;a href=&quot;https://github.blog/changelog/2022-10-06-new-dependabot-alerts-webhook/&quot;&gt;Dependabot アラート webhook を補完し&lt;/a&gt;ます。&lt;/p&gt;
&lt;p&gt;この API は本日から GitHub.com で利用でき、バージョン 3.8 以降の GitHub Enterprise Server (GHES) ユーザーも利用できるようになります。&lt;/p&gt;
&lt;p&gt;詳細については、 &lt;a href=&quot;https://docs.github.com/en/rest/dependabot/alerts&quot;&gt;REST API リファレンス&lt;/a&gt;の Dependabot アラートを参照するか、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts&quot;&gt;ドキュメント&lt;/a&gt;で Dependabot アラートの詳細を確認してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">67966</post-id></item></channel></rss>