<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>GitHub Changelog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Tue, 23 Aug 2022 22:08:20 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.0.1</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>GitHub Changelog</title><link>https://github.blog</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>GitHub Actions: 大規模なセキュアなクラウド デプロイを可能にする OpenID Connect サポートの機能強化</title><link>https://github.blog/changelog/2022-08-23-github-actions-enhancements-to-openid-connect-support-to-enable-secure-cloud-deployments-at-scale</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 23 Aug 2022 22:08:20 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-23-github-actions-enhancements-to-openid-connect-support-to-enable-secure-cloud-deployments-at-scale</guid><description>GitHub Actions&amp;#058; Enhancements to OpenID Connect support to enable secure cloud deployments at scale</description><content:encoded>&lt;p&gt;GitHub Actions での OpenID Connect (OIDC) サポートが強化され、安全なクラウド デプロイを大規模にサポートできるようになりました。&lt;/p&gt;
&lt;p&gt;組織とリポジトリの管理者は、新しい&lt;a href=&quot;https://docs.github.com/en/rest/actions/oidc&quot;&gt;OIDC API サポート&lt;/a&gt;を使用して次のことができます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;subject&lt;/code&gt;のクレーム形式をカスタマイズすることで、クラウド展開ワークフロー全体で標準の OIDC 構成を有効にします。&lt;/li&gt;
&lt;li&gt; &lt;code&gt;issuer&lt;/code&gt;の URL にエンタープライズ スラッグを追加することで、OIDC ベースの展開の追加のコンプライアンスとセキュリティを確保します。&lt;/li&gt;
&lt;li&gt; &lt;code&gt;repository_id&lt;/code&gt;や&lt;code&gt;repo_visibility&lt;/code&gt;などの追加の&lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token&quot;&gt;OIDC トークン クレーム&lt;/a&gt;を使用して、高度な OIDC ポリシーを構成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments&quot;&gt;OpenID Connect を使用して GitHub ワークフローを強化するセキュリティの&lt;/a&gt;詳細については、こちらをご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66593</post-id></item><item><title>プル リクエストのマージ時にデフォルトのコミット メッセージを制御するための新しいオプション</title><link>https://github.blog/changelog/2022-08-23-new-options-for-controlling-the-default-commit-message-when-merging-a-pull-request</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 23 Aug 2022 19:59:15 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-23-new-options-for-controlling-the-default-commit-message-when-merging-a-pull-request</guid><description>New options for controlling the default commit message when merging a pull request</description><content:encoded>&lt;p&gt;5 月に、プル リクエストを squash マージするときにユーザーに表示されるデフォルトのコミット メッセージに&lt;a href=&quot;https://github.blog/changelog/2022-05-11-default-to-pr-titles-for-squash-merge-commit-messages/&quot;&gt;プル リクエストのタイトルを含める&lt;/a&gt;ための設定を出荷しました。プル リクエストの説明を使用するなど、デフォルトのコミット メッセージをカスタマイズするためのオプションを追加しました。また、マージ コミット マージのデフォルトのコミット メッセージをカスタマイズできるようになりました。目標は、プル リクエストに対するより予測可能で、一貫性があり、有用なコミット メッセージであり、より有用な Git コミット履歴に変換されます。&lt;/p&gt;
&lt;h2 id=&quot;how-it-works&quot; id=&quot;how-it-works&quot; &gt;使い方&lt;a href=&quot;#how-it-works&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;How it works&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;リポジトリ設定から、メンテナーまたは管理者は、プル リクエストをマージするときに生成されるコミット メッセージのデフォルトの形式を選択できます。 &lt;br /&gt;
&lt;img alt=&quot;画像&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2503052/185104685-6fccc041-2379-4c56-969c-6732d10821f6.png?w=790&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;この選択は、プル リクエストのマージ時にプル リクエスト ページでユーザーに提示されるデフォルトのコミット メッセージを形成するために使用されます。たとえば、&lt;strong&gt;デフォルトのプル リクエストのタイトルと説明&lt;/strong&gt;が選択されていて、ユーザーがクリックしてプル リクエストとこの説明をマージするとします。 &lt;br /&gt;
&lt;img alt=&quot;画像&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2503052/185994525-aeebc8fa-81bb-4308-b4cb-1cba038cea39.png?w=638&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;デフォルトのコミット メッセージには、プル リクエストのタイトルと説明が含まれます。 &lt;br /&gt;
&lt;img alt=&quot;画像&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2503052/185994628-01c2c9c4-4664-4829-ba5b-a7135c74dc0b.png?w=629&amp;#038;ssl=1&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;その後、ユーザーはこのコミット メッセージを受け入れるか、マージする前に変更を加えることができます。&lt;/p&gt;
&lt;h3 id=&quot;options&quot; id=&quot;options&quot; &gt;オプション&lt;a href=&quot;#options&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Options&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;マージ コミット マージの場合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;デフォルト メッセージ&lt;/strong&gt;: 最初の行にプル リクエスト番号とヘッド ブランチ。 3 行目のプル リクエストのタイトル&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プル リクエストのタイトル&lt;/strong&gt;: プル リクエストのタイトルと最初の行の番号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プル リクエストのタイトルと説明&lt;/strong&gt;: 最初の行のプル リクエストのタイトルと番号。 3 行目以降のプル リクエストの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スカッシュマージの場合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;デフォルト メッセージ&lt;/strong&gt;: コミット タイトルとコミット メッセージ (プル リクエストに単一のコミットが含まれる場合)、またはプル リクエストのタイトルと数、およびコミットのリスト (プル リクエストに複数のコミットが含まれる場合)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プル リクエストのタイトル&lt;/strong&gt;: プル リクエストのタイトルと最初の行の番号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プル リクエストのタイトルとコミットの詳細&lt;/strong&gt;: 最初の行にプル リクエストのタイトルと番号。コミット メッセージ (単一のコミットの場合) またはコミットのリスト (複数のコミットの場合)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プル リクエストのタイトルと説明&lt;/strong&gt;: 最初の行のプル リクエストのタイトルと番号。 3 行目以降のプル リクエストの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;additional-details&quot; id=&quot;additional-details&quot; &gt;追加の詳細&lt;a href=&quot;#additional-details&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Additional details&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; REST API または GraphQL ミューテーションを使用してプル リクエストをマージするときにメッセージが提供されない場合、選択したメッセージ形式とマージ方法に基づいてデフォルトのコミット メッセージが形成されます。&lt;/p&gt;
&lt;p&gt;デフォルトのメッセージ形式は&lt;a href=&quot;https://docs.github.com/rest/repos/repos#create-an-organization-repository&quot;&gt;、リポジトリの作成&lt;/a&gt;またはリポジトリ&lt;a href=&quot;https://docs.github.com/rest/repos/repos#update-a-repository&quot;&gt;の更新&lt;/a&gt;REST API を使用して管理できます。 &lt;code&gt;merge_commit_title&lt;/code&gt; 、 &lt;code&gt;merge_commit_message&lt;/code&gt; 、および&lt;code&gt;squash_merge_commit_title&lt;/code&gt; 、 &lt;code&gt;squash_merge_commit_message&lt;/code&gt;パラメータを参照してください。&lt;/p&gt;
&lt;h2 id=&quot;feedback&quot; id=&quot;feedback&quot; &gt;フィードバック&lt;a href=&quot;#feedback&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Feedback&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;私たちはあなたから聞きたい！ご意見と改善方法をお聞かせください: &lt;a href=&quot;https://github.com/orgs/community/discussions/30439&quot;&gt;https://github.com/orgs/community/discussions/30439&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot; id=&quot;learn-more&quot; &gt;もっと詳しく知る&lt;a href=&quot;#learn-more&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Learn more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-merging-for-pull-requests&quot;&gt;マージ コミット マージ&lt;/a&gt;の&lt;a href=&quot;https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests&quot;&gt;構成とスカッシュ マージ&lt;/a&gt;の構成の詳細については、こちらを参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66592</post-id></item><item><title>Codespaces の組織の請求設定の更新</title><link>https://github.blog/changelog/2022-08-23-organization-billing-settings-updates-for-codespaces</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 23 Aug 2022 17:35:50 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-23-organization-billing-settings-updates-for-codespaces</guid><description>Organization Billing Settings Updates for Codespaces</description><content:encoded>&lt;p&gt;今回の更新により、組織の管理者は、組織が管理するリポジトリ用に作成された codespace の課金設定を管理できるようになりました。管理者は、GitHub Codespaces の請求をカバーする組織にオプトインするか、組織の選択したメンバーのみに Codespaces アクセスを有効にするか、すべての組織メンバーを許可するか、外部の共同作業者を含めるかを選択できます。詳細については、以下のスクリーンショットと&lt;a href=&quot;https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/enabling-github-codespaces-for-your-organization&quot;&gt;、組織で GitHub Codespaces を有効にする&lt;/a&gt;ためのドキュメントを参照してください。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/9445180/179117678-573c26ec-d039-47c8-8fba-7d992b84a169.png?ssl=1&quot; alt=&quot;組織設定の課金 UI&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;注: このインターフェイスの機能は変わりません。明確にするために、以前は「ユーザー権限」と表示されていたラベルが「請求」に更新されました。この更新の結果、設定を変更する必要はありません。&lt;/p&gt;
&lt;p&gt;リポジトリを複製でき、Codespaces にアクセスできる GitHub ユーザーは、リポジトリ用の codespace を作成できます。組織内のリポジトリを複製できるユーザーを管理するには、リポジトリ&lt;a href=&quot;https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository&quot;&gt;へのアクセス権を持つチームと&lt;/a&gt;ユーザーの管理 を参照してください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66589</post-id></item><item><title>SSH コミット検証がサポートされるようになりました</title><link>https://github.blog/changelog/2022-08-23-ssh-commit-verification-now-supported</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 23 Aug 2022 16:20:50 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-23-ssh-commit-verification-now-supported</guid><description>SSH commit verification now supported</description><content:encoded>&lt;p&gt;GitHub は SSH コミット検証をサポートするようになったため、自己生成された SSH 公開鍵を使用してローカルでコミットとタグに署名できます。これにより、他の人は自分が行った変更の元について信頼できるようになります。コミットまたはタグに暗号的に検証可能な SSH 署名がある場合、GitHub はそのコミットまたはタグを「検証済み」または「部分的に検証済み」にします。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/4021812/186039068-d0d84d96-873b-44ec-8536-5e3e0ab648a3.png?ssl=1&quot; alt=&quot;image-of-verified-commit&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt; GitHub での認証に SSH キーを既に使用している場合は、同じキー ペアまたは別のキー ペアの公開キーをアップロードして、署名キーとして使用できるようになりました。アカウントに追加できる署名キーの数に制限はありません。詳細については、GitHub ドキュメントの&lt;a href=&quot;https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification#ssh-commit-verification&quot;&gt;SSH コミット検証&lt;/a&gt;を参照してください。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/4021812/186039066-03b2d56f-6e15-44ee-a6ef-37bab5d5b47d.png?ssl=1&quot; alt=&quot;image-of-ssh-signing-key-ui&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66588</post-id></item><item><title>GitHub ページ: テーマ ピッカーの廃止</title><link>https://github.blog/changelog/2022-08-22-github-pages-deprecating-the-theme-picker</link><dc:creator>Kevin Duck</dc:creator><pubDate>Tue, 23 Aug 2022 02:12:59 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-22-github-pages-deprecating-the-theme-picker</guid><description>GitHub Pages&amp;#058; Deprecating the theme picker</description><content:encoded>&lt;p&gt;本日、 &lt;a href=&quot;https://github.blog/2012-04-02-instantly-beautiful-project-pages/&quot;&gt;2012 年&lt;/a&gt;に GitHub Pages に導入したテーマ ピッカーを廃止します。&lt;/p&gt;
&lt;p&gt;このエクスペリエンスにより、ユーザーはユーザー インターフェイスでテーマをプレビューできましたが、 &lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt;のセキュリティを強化するためにこれを行っています。&lt;/p&gt;
&lt;p&gt;もちろん、Pages で必要な&lt;a href=&quot;https://jekyllrb.com/docs/themes/&quot;&gt;Jekyll テーマ&lt;/a&gt;を引き続き使用し、 &lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll&quot;&gt;構成を少し変更&lt;/a&gt;するだけで美しいサイトを公開できます。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66584</post-id></item><item><title>help.github.com からすぐに GitHub サポートに移動します</title><link>https://github.blog/changelog/2022-08-22-help-github-com-will-soon-take-you-to-github-support</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 22 Aug 2022 20:03:07 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-22-help-github-com-will-soon-take-you-to-github-support</guid><description>help.github.com will soon take you to GitHub Support</description><content:encoded>&lt;p&gt;2022 年 9 月 20 日以降、help.github.com は GitHub のサポート ポータル (support.github.com) へのリダイレクトを開始します。&lt;br /&gt;
ユーザーは引き続き docs.github.com を使用して GitHub Docs にアクセスする必要があります。&lt;/p&gt;
&lt;p&gt; 「help.github.com/」で始まるリンクは、引き続き期待どおりに機能します。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66573</post-id></item><item><title>GitHub Actions: 再利用可能なワークフローの改善</title><link>https://github.blog/changelog/2022-08-22-github-actions-improvements-to-reusable-workflows-2</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 22 Aug 2022 18:05:40 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-22-github-actions-improvements-to-reusable-workflows-2</guid><description>GitHub Actions&amp;#058; Improvements to reusable workflows</description><content:encoded>&lt;p&gt;再利用可能なワークフローは、マトリックスやその他の再利用可能なワークフローから呼び出すことができるようになりました。&lt;/p&gt;
&lt;p&gt;最大 4 レベルの再利用可能なワークフローをネストできるようになり、柔軟性が向上し、コードの再利用が向上しました。マトリックスから再利用可能なワークフローを呼び出すと、より豊富なパラメーター化されたビルドとデプロイを作成できます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-a-matrix-strategy-with-a-reusable-workflow&quot;&gt;再利用可能なワークフローのネストについて詳しくは、こちらをご覧ください。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-reusable-workflows&quot;&gt;マトリックス戦略で再利用可能なワークフローを使用する方法の詳細をご覧ください。&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/actions-and-packages&quot;&gt;質問やフィードバックについては、GitHub Actions コミュニティ にアクセスしてください&lt;/a&gt;。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66566</post-id></item><item><title>Dependabot アラート: オプションの却下コメント</title><link>https://github.blog/changelog/2022-08-22-dependabot-alerts-optional-dismissal-comment-2</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 22 Aug 2022 18:03:02 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-22-dependabot-alerts-optional-dismissal-comment-2</guid><description>Dependabot alerts&amp;#058; optional dismissal comment</description><content:encoded>&lt;p&gt;Dependabot アラート ユーザーは、アラートを閉じるときにオプションのコメントを追加できるようになりました。これらのコメント (最大 280 文字) は、アラート タイムラインおよび&lt;a href=&quot;https://docs.github.com/en/graphql/reference/objects#repositoryvulnerabilityalert&quot;&gt;GraphQL API&lt;/a&gt;の新しい&lt;code&gt;dismissComment&lt;/code&gt;フィールドを介して表示できます。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/user-images.githubusercontent.com/5788563/184968487-03e720b2-4c01-444e-92c3-f7c2c9cc5f9d.png?ssl=1&quot; alt=&quot;Dependabot アラート オプションの却下コメント&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts&quot;&gt;Dependabot アラート&lt;/a&gt;と&lt;a href=&quot;https://docs.github.com/en/graphql/reference/objects#repositoryvulnerabilityalert&quot;&gt;GraphQL API&lt;/a&gt;の詳細をご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66565</post-id></item><item><title>グループ Webhook イベントと GitHub Actions ワークフロー トリガーをマージする</title><link>https://github.blog/changelog/2022-08-18-merge-group-webhook-event-and-github-actions-workflow-trigger</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 18 Aug 2022 21:58:56 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-18-merge-group-webhook-event-and-github-actions-workflow-trigger</guid><description>Merge group webhook event and GitHub Actions workflow trigger</description><content:encoded>&lt;blockquote&gt;&lt;p&gt;
この機能は、Pull Request Merge Queue ベータ版に登録されているリポジトリで利用できます。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;新しい Webhook イベントと GitHub Actions ワークフロー トリガー ( &lt;code&gt;merge_group&lt;/code&gt; ) により、マージ キューによって作成されたマージ グループで必要なステータス チェックを簡単に実行できます。マージ グループには、1 つ以上のプル リクエストからの変更が含まれ、ターゲット ブランチで必要なステータス チェックに合格する必要があります。&lt;/p&gt;
&lt;p&gt;現在サポートされている 1 つのアクション ( &lt;code&gt;checks_requested&lt;/code&gt; ) を持つ&lt;code&gt;merge_group&lt;/code&gt; Webhook イベントは、マージ グループが作成された後に送信され、マージ グループでステータス チェックが必要な場合に、GitHub Actions を含む受信者に通知します。イベント ペイロードには&lt;code&gt;head_sha&lt;/code&gt;が含まれます。これは、検証が必要で、&lt;a href=&quot;https://docs.github.com/en/rest/checks/runs&quot;&gt;チェックの実行&lt;/a&gt;または&lt;a href=&quot;https://docs.github.com/en/rest/commits/statuses&quot;&gt;コミット ステータス&lt;/a&gt;を使用してステータスが報告されるコミット SHA です。 GitHub Actions の場合、ステータスは、トリガーされたワークフローのジョブの終了時に自動的に報告されます。&lt;/p&gt;
&lt;p&gt;マージ グループの GitHub Actions ワークフローをトリガーするには、 &lt;code&gt;merge_group&lt;/code&gt;トリガーを使用する必要があります。次の例は、 &lt;code&gt;main&lt;/code&gt;ブランチをターゲットとする個々のプル リクエストとマージ グループでトリガーします。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-yaml&quot;&gt;# Trigger this workflow on individual pull requests and merge groups that target the `main` branch
 on:
 pull_request:
 branches: [ main ]
 merge_group:
 branches: [ main ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;code&gt;push&lt;/code&gt;イベントは、マージ グループ ブランチが作成されたときに送信され、GitHub Actions ワークフローをトリガーします。ただし、 &lt;code&gt;merge_group&lt;/code&gt;イベントとは異なり、 &lt;code&gt;push&lt;/code&gt;イベントにはマージ グループのターゲット ブランチは含まれません。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue&quot;&gt;マージ キューの使用&lt;/a&gt;の詳細については、こちらをご覧ください。&lt;/p&gt;
&lt;p&gt;新しい GitHub Actions の&lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#merge_group&quot;&gt;&lt;code&gt;merge_group&lt;/code&gt;ワークフロー トリガー&lt;/a&gt;と&lt;a href=&quot;https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#merge_group&quot;&gt;&lt;code&gt;merge_group&lt;/code&gt; Webhook イベント&lt;/a&gt;の詳細をご覧ください。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66561</post-id></item><item><title>ライセンス同期の更新: 新しい消費ライセンス データ、新しいライセンス API、およびライセンス マッチングの改善 (パブリック ベータ)</title><link>https://github.blog/changelog/2022-08-18-license-sync-updates-new-consumed-license-data-a-new-license-api-and-license-matching-improvements-public-beta</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 18 Aug 2022 20:50:41 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2022-08-18-license-sync-updates-new-consumed-license-data-a-new-license-api-and-license-matching-improvements-public-beta</guid><description>License sync updates&amp;#058; new Consumed License data, a new License API and license matching improvements (Public Beta)</description><content:encoded>&lt;p&gt;最近 GHES に追加した&lt;a href=&quot;https://docs.github.com/en/enterprise-server@3.5/admin/release-notes#sync-license-usage-any-time&quot;&gt;[今すぐ同期] ボタン&lt;/a&gt;に加えて、GitHub Connect ライセンス同期機能に一連の改善を行いました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;エンタープライズ管理者は、各ユーザーの&lt;code&gt;saml_name_id&lt;/code&gt;や GitHub Enterprise Cloud 電子メール アドレス (検証済みドメインのみ) などの追加データを含む、更新された消費ライセンス CSV にアクセスできるようになりました。&lt;/li&gt;
&lt;li&gt;エンタープライズ管理者は、次の 2 つの新しい&lt;a href=&quot;https://docs.github.com/en/rest/enterprise-admin/license&quot;&gt;License&lt;/a&gt; REST API エンドポイントにもアクセスできます。&lt;br /&gt;
を。 &lt;code&gt;consumed-licenses&lt;/code&gt; : CSV ダウンロードで見つかったものと同じ消費済みライセンス データを返します。&lt;br /&gt;
 b. &lt;code&gt;license-sync-status&lt;/code&gt; : ライセンス同期ジョブのステータスに関連する情報を返します&lt;/li&gt;
&lt;li&gt;SAML SSO を使用するエンタープライズ向けのライセンス同期&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/billing/managing-your-license-for-github-enterprise/troubleshooting-license-usage-for-github-enterprise#about-the-calculation-of-consumed-licenses&quot;&gt;マッチング アルゴリズム&lt;/a&gt;を改善しました。現在、ユーザーの GitHub Enterprise Cloud 電子メール アドレスとの照合に加えて、Server ユーザー アカウントを SAML 属性と照合しようとしています。この改善により、エンタープライズ管理者は、ユーザーに仕事関連の電子メール アドレスを GitHub Enterprise Cloud アカウントに追加するよう要求する必要がなくなります。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/code-security/security-overview/about-the-security-overview&quot;&gt;ライセンス同期の詳細&lt;/a&gt;&lt;a href=&quot;https://github.com/community/community/discussions/categories/general&quot;&gt;を確認し、フィードバックをお寄せください&lt;/a&gt;&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">66560</post-id></item></channel></rss>