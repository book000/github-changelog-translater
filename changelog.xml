<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:georss="http://www.georss.org/georss" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"><channel><title>Changelogs Archive - The GitHub Blog</title><atom:link href="https://github.blog/changelog/feed/" rel="self" type="application/rss+xml"></atom:link><link>https://github.blog/changelog/</link><description>Updates, ideas, and inspiration from GitHub to help developers build and design software.</description><lastBuildDate>Mon, 14 Aug 2023 09:12:19 +0000</lastBuildDate><language>en-US</language><sy:updatePeriod>hourly</sy:updatePeriod><sy:updateFrequency>1</sy:updateFrequency><generator>https://wordpress.org/?v=6.3</generator><image><url>https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=32%2C32</url><title>Changelogs Archive - The GitHub Blog</title><link>https://github.blog/changelog/</link><width>32</width><height>32</height></image><site xmlns="com-wordpress:feed-additions:1">153214340</site><item><title>カスタム CodeQL クエリを作成するための新しいデータフロー API</title><link>https://github.blog/changelog/2023-08-14-new-dataflow-api-for-writing-custom-codeql-queries</link><dc:creator>Kevin Duck</dc:creator><pubDate>Mon, 14 Aug 2023 08:34:25 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-14-new-dataflow-api-for-writing-custom-codeql-queries</guid><description>&lt;p&gt;New dataflow API for writing custom CodeQL queries&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-14-new-dataflow-api-for-writing-custom-codeql-queries&quot;&gt;New dataflow API for writing custom CodeQL queries&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;データフロー分析を利用するカスタム CodeQL クエリを作成するユーザー向けに、新しい API をリリースしました。新しい API では柔軟性が向上し、古い API にありがちな落とし穴を防ぐ改善が加えられ、クエリ評価のパフォーマンスが 5% 向上します。個人的な興味のために&lt;a href=&quot;https://codeql.github.com/docs/writing-codeql-queries/&quot;&gt;CodeQL クエリを作成して&lt;/a&gt;いる場合でも、&lt;a href=&quot;https://securitylab.github.com/bounties/&quot;&gt;世界のコードのセキュリティを保護するために報奨金プログラムに参加している場合&lt;/a&gt;でも、この投稿は古い API から新しい API への移行に役立ちます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;この API の変更は、独自のカスタム CodeQL クエリを作成するユーザーにのみ関係します。 GitHub の&lt;a href=&quot;https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/built-in-codeql-query-suites&quot;&gt;標準 CodeQL クエリ スイートを&lt;/a&gt;使用するコード スキャン ユーザーは、変更を加える必要はありません。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新しいデータフロー API の導入により、古い API は非推奨になります。古い API は 2024 年 12 月まで引き続き機能します。 CodeQL CLI は、2023 年 12 月に非推奨の警告を発し始める予定です。&lt;/p&gt;
&lt;p&gt; CodeQL クエリを古い API から新しい API に更新する方法を示すために、間もなく非推奨になる API を使用する次のクエリの例を考えてみましょう。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-ql&quot;&gt;class SensitiveLoggerConfiguration extends TaintTracking::Configuration {
 SensitiveLoggerConfiguration() { this = &quot;SensitiveLoggerConfiguration&quot; } // 6: characteristic predicate with dummy string value (see below)

 override predicate isSource(DataFlow::Node source) { source.asExpr() instanceof CredentialExpr }

 override predicate isSink(DataFlow::Node sink) { sinkNode(sink, &quot;log-injection&quot;) }

 override predicate isSanitizer(DataFlow::Node sanitizer) {
 sanitizer.asExpr() instanceof LiveLiteral or
 sanitizer.getType() instanceof PrimitiveType or
 sanitizer.getType() instanceof BoxedType or
 sanitizer.getType() instanceof NumberType or
 sanitizer.getType() instanceof TypeType
 }

 override predicate isSanitizerIn(DataFlow::Node node) { this.isSource(node) }
 }

 import DataFlow::PathGraph

 from SensitiveLoggerConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
 where cfg.hasFlowPath(source, sink)
 select sink.getNode(), source, sink, &quot;This $@ is written to a log file.&quot;,
 source.getNode(),
 &quot;potentially sensitive information&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クエリを新しい API に変換するには:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; &lt;code&gt;class&lt;/code&gt;の代わりに&lt;code&gt;module&lt;/code&gt;使用します。 CodeQL &lt;code&gt;module&lt;/code&gt;何も&lt;code&gt;extend&lt;/code&gt;せず、代わりに署名&lt;code&gt;implements&lt;/code&gt; 。データ フローとテイントの両方の追跡構成の場合、これは&lt;code&gt;DataFlow::ConfigSig&lt;/code&gt;または&lt;code&gt;FlowState&lt;/code&gt;が必要な場合は&lt;code&gt;DataFlow::StateConfigSig&lt;/code&gt;です。&lt;/li&gt;
&lt;li&gt;以前は、 &lt;code&gt;DataFlow::Configuration&lt;/code&gt;または&lt;code&gt;TaintTracking::Configuration&lt;/code&gt;を拡張することで、データ フローとテイント トラッキングのどちらかを選択していました。代わりに、共有署名の実装&lt;span class=&quot;x x-first&quot;&gt;を使用して&lt;code&gt;&lt;span class=&quot;pl-c1 x&quot;&gt;DataFlow::Global&lt;..&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;または&lt;/span&gt;&lt;span class=&quot;pl-s x&quot;&gt;&lt;span class=&quot;x x-first&quot;&gt;&lt;code&gt;&lt;span class=&quot;pl-c1 x&quot;&gt;TaintTracking::Global&lt;..&gt;&lt;/span&gt;&lt;/code&gt;&lt;/span&gt;&lt;/span&gt;パラメーター化モジュールをインスタンス化することで、データまたはテイント フローを定義します。ここで、データ フローとテイント フローのどちらを選択するかが決まります。汚染追跡が行われます。&lt;/li&gt;
&lt;li&gt;モジュールを定義しているため、述語は何も&lt;code&gt;override&lt;/code&gt;なくなりました。&lt;/li&gt;
&lt;li&gt;サニタイザーとバリアの概念は&lt;code&gt;isBarrier&lt;/code&gt;に統合され、汚染追跡とデータ フロー構成の両方に適用されます。 &lt;code&gt;isSanitizer&lt;/code&gt;の代わりに&lt;code&gt;isBarrier&lt;/code&gt;使用し、 &lt;code&gt;isSanitizerIn&lt;/code&gt;の代わりに&lt;code&gt;isBarrierIn&lt;/code&gt;使用する必要があります。&lt;/li&gt;
&lt;li&gt;同様に、テイント追跡述語&lt;code&gt;isAdditionalTaintStep&lt;/code&gt;の代わりに、 &lt;code&gt;isAdditionalFlowStep&lt;/code&gt;を使用します。&lt;/li&gt;
&lt;li&gt;ダミー文字列値を含む特性述語は必要なくなりました。&lt;/li&gt;
&lt;li&gt;汎用の&lt;code&gt;DataFlow::PathGraph&lt;/code&gt;使用しないでください。代わりに、 &lt;code&gt;PathGraph&lt;/code&gt;使用しているモジュールから直接インポートされます。たとえば、以下のクエリ例の更新バージョンの&lt;code&gt;SensitiveLoggerFlow::PathGraph&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;上記と同様に、 &lt;code&gt;DataFlow&lt;/code&gt;からではなく、結果のモジュールから&lt;code&gt;PathNode&lt;/code&gt;型を使用します。&lt;/li&gt;
&lt;li&gt;構成クラスがなくなったので、 &lt;code&gt;from&lt;/code&gt;句と&lt;code&gt;where&lt;/code&gt;句でモジュールを直接使用します。たとえば、構成オブジェクト&lt;code&gt;cfg&lt;/code&gt;から&lt;code&gt;cfg.hasFlowPath&lt;/code&gt;または&lt;code&gt;cfg.hasFlow&lt;/code&gt;を使用する代わりに、作業しているモジュールからの&lt;code&gt;flowPath&lt;/code&gt;または&lt;code&gt;flow&lt;/code&gt;を使用します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上記の変更をすべて考慮すると、更新されたクエリは次のようになります。&lt;/p&gt;
&lt;pre&gt; &lt;code class=&quot;language-ql&quot;&gt;module SensitiveLoggerConfig implements DataFlow::ConfigSig { // 1: module always implements DataFlow::ConfigSig or DataFlow::StateConfigSig
 predicate isSource(DataFlow::Node source) { source.asExpr() instanceof CredentialExpr } // 3: no need to specify &amp;#39;override&amp;#39;
 predicate isSink(DataFlow::Node sink) { sinkNode(sink, &quot;log-injection&quot;) }

 predicate isBarrier(DataFlow::Node sanitizer) { // 4: &amp;#39;isBarrier&amp;#39; replaces &amp;#39;isSanitizer&amp;#39;
 sanitizer.asExpr() instanceof LiveLiteral or
 sanitizer.getType() instanceof PrimitiveType or
 sanitizer.getType() instanceof BoxedType or
 sanitizer.getType() instanceof NumberType or
 sanitizer.getType() instanceof TypeType
 }

 predicate isBarrierIn(DataFlow::Node node) { isSource(node) } // 4: isBarrierIn instead of isSanitizerIn

 }

 module SensitiveLoggerFlow = TaintTracking::Global ; // 2: TaintTracking selected

 import SensitiveLoggerFlow::PathGraph // 7: the PathGraph specific to the module you are using

 from SensitiveLoggerFlow::PathNode source, SensitiveLoggerFlow::PathNode sink // 8 &amp; 9: using the module directly
 where SensitiveLoggerFlow::flowPath(source, sink) // 9: using the flowPath from the module
 select sink.getNode(), source, sink, &quot;This $@ is written to a log file.&quot;, source.getNode(),
 &quot;potentially sensitive information&quot;&lt;/code&gt;&lt;SensitiveLoggerConfig&gt; &lt;code class=&quot;language-ql&quot;&gt;module SensitiveLoggerConfig implements DataFlow::ConfigSig { // 1: module always implements DataFlow::ConfigSig or DataFlow::StateConfigSig
 predicate isSource(DataFlow::Node source) { source.asExpr() instanceof CredentialExpr } // 3: no need to specify &amp;#39;override&amp;#39;
 predicate isSink(DataFlow::Node sink) { sinkNode(sink, &quot;log-injection&quot;) }

 predicate isBarrier(DataFlow::Node sanitizer) { // 4: &amp;#39;isBarrier&amp;#39; replaces &amp;#39;isSanitizer&amp;#39;
 sanitizer.asExpr() instanceof LiveLiteral or
 sanitizer.getType() instanceof PrimitiveType or
 sanitizer.getType() instanceof BoxedType or
 sanitizer.getType() instanceof NumberType or
 sanitizer.getType() instanceof TypeType
 }

 predicate isBarrierIn(DataFlow::Node node) { isSource(node) } // 4: isBarrierIn instead of isSanitizerIn

 }

 module SensitiveLoggerFlow = TaintTracking::Global ; // 2: TaintTracking selected

 import SensitiveLoggerFlow::PathGraph // 7: the PathGraph specific to the module you are using

 from SensitiveLoggerFlow::PathNode source, SensitiveLoggerFlow::PathNode sink // 8 &amp; 9: using the module directly
 where SensitiveLoggerFlow::flowPath(source, sink) // 9: using the flowPath from the module
 select sink.getNode(), source, sink, &quot;This $@ is written to a log file.&quot;, source.getNode(),
 &quot;potentially sensitive information&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では取り上げていませんが、フロー状態が必要な場合は&lt;code&gt;DataFlow::StateConfigSig&lt;/code&gt;署名を実装することもできます。次に、そのシグネチャの実装を使用して&lt;code&gt;DataFlow::GlobalWithState&lt;/code&gt;または&lt;code&gt;TaintTracking::GlobalWithState&lt;/code&gt;をインスタンス化します。 flow-state に特有のもう 1 つの変更は、 &lt;code&gt;DataFlow::FlowState&lt;/code&gt;使用する代わりに、 &lt;code&gt;FlowState class&lt;/code&gt;モジュールのメンバーとして定義するようになったことです。これは、状態として&lt;code&gt;string&lt;/code&gt;以外の型 (整数、ブール値など) を使用する場合に便利です。この実装の例は&lt;a href=&quot;https://github.com/github/codeql/blob/5b0d4ce7cb19527691a2e0df84a6004849a4a3bc/java/ql/lib/semmle/code/java/security/ArbitraryApkInstallationQuery.qll#L85&quot;&gt;ここに&lt;/a&gt;あります。&lt;/p&gt;
&lt;p&gt;この機能は CodeQL バージョン&lt;code&gt;2.13.0&lt;/code&gt;で利用できます。独自のカスタム CodeQL クエリの作成を開始したい場合は、 &lt;a href=&quot;https://codeql.github.com/docs/codeql-for-visual-studio-code/setting-up-codeql-in-visual-studio-code/#configuring-access-to-the-codeql-cli&quot;&gt;次の手順に従って CodeQL CLI と VS Code 拡張機能の使用を開始してください&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-14-new-dataflow-api-for-writing-custom-codeql-queries&quot;&gt;カスタム CodeQL クエリを作成するための新しいデータフロー API という&lt;/a&gt;投稿は、最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73669</post-id></item><item><title>GitHub Copilot 8 月 10 日の更新</title><link>https://github.blog/changelog/2023-08-11-github-copilot-august-10th-update</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 11 Aug 2023 21:19:02 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-11-auto-draft</guid><description>&lt;p&gt;Today&amp;#039;s update brings the ability to set an allowlist for languages within the IntelliJ extension, quickly switch to an annual GitHub Copilot for Individuals plan, and the private preview of code referencing. Select languages setting within IntelliJ The previous disabledLanguages configuration is replaced with a new, more flexible languageAllowList configuration. This change allows enabling or [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-11-github-copilot-august-10th-update&quot;&gt;GitHub Copilot August 10th Update&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;本日のアップデートにより、IntelliJ 拡張機能内で言語のホワイトリストを設定し、年間 GitHub Copilot for Individuals プランにすぐに切り替える機能と、コード参照のプライベート プレビューが可能になります。 &lt;/p&gt;
&lt;h2 id=&quot;select-languages-setting-within-intellij&quot; id=&quot;select-languages-setting-within-intellij&quot; &gt; IntelliJ 内で言語設定を選択します&lt;a href=&quot;#select-languages-setting-within-intellij&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Select languages setting within IntelliJ&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以前の&lt;code&gt;disabledLanguages&lt;/code&gt;設定は、新しい、より柔軟な&lt;code&gt;languageAllowList&lt;/code&gt;設定に置き換えられます。この変更により、 &lt;code&gt;*&lt;/code&gt;ワイルドカードを使用してすべての言語を一度に有効または無効にすることができます。&lt;/p&gt;
&lt;h3 id=&quot;github-copilot-xml-location&quot; id=&quot;github-copilot-xml-location&quot; &gt; github-copilot.xml の場所&lt;a href=&quot;#github-copilot-xml-location&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;github-copilot.xml location&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; &lt;code&gt;github-copilot.xml&lt;/code&gt;ファイルは次の場所にあります。&lt;/p&gt;
&lt;pre&gt; &lt;code&gt;~ &lt;span class=&quot;hljs-regexp&quot;&gt;/Library/&lt;/span&gt; Application Support &lt;span class=&quot;hljs-regexp&quot;&gt;/JetBrains/&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/options/gi&lt;/span&gt; thub-copilot.xml
&lt;/code&gt;&lt;IDE+VERSION&gt; &lt;code&gt;~ &lt;span class=&quot;hljs-regexp&quot;&gt;/Library/&lt;/span&gt; Application Support &lt;span class=&quot;hljs-regexp&quot;&gt;/JetBrains/&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/options/gi&lt;/span&gt; thub-copilot.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;たとえば、 &lt;code&gt;IntelliJ&lt;/code&gt;バージョン&lt;code&gt;2022.3&lt;/code&gt;の&lt;code&gt;github-copilot.xml&lt;/code&gt;へのパスは次のとおりです。&lt;/p&gt;
&lt;pre&gt; &lt;code&gt;~ &lt;span class=&quot;hljs-regexp&quot;&gt;/Library/&lt;/span&gt; Application Support &lt;span class=&quot;hljs-regexp&quot;&gt;/JetBrains/&lt;/span&gt; IntelliJIdea2022. &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;hljs-regexp&quot;&gt;/options/gi&lt;/span&gt; thub-copilot.xml
&lt;/code&gt; &lt;/pre&gt;
&lt;h3 id=&quot;github-copilot-xml-for-enabling-all-languages-default-behavior-&quot; id=&quot;github-copilot-xml-for-enabling-all-languages-default-behavior-&quot; &gt;すべての言語を有効にするための github-copilot.xml (デフォルトの動作) &lt;a href=&quot;#github-copilot-xml-for-enabling-all-languages-default-behavior-&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;github-copilot.xml for enabling all languages (default behavior)&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;構成にワイルドカードも含まれている場合、個別の言語のオーバーライドを指定できるようになりました。 &lt;/p&gt;
&lt;h3 id=&quot;github-copilot-xml-for-disabling-all-languages-except-for-kotlin-and-java&quot; id=&quot;github-copilot-xml-for-disabling-all-languages-except-for-kotlin-and-java&quot; &gt; Kotlin と Java を除くすべての言語を無効にする github-copilot.xml &lt;a href=&quot;#github-copilot-xml-for-disabling-all-languages-except-for-kotlin-and-java&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;github-copilot.xml for disabling all languages except for Kotlin and Java&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;kotlin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;kotlin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;kotlin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;kotlin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;false&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;kotlin&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新しい非表示の&lt;code&gt;languageAllowListReadOnly&lt;/code&gt;構成プロパティが追加され、UI で&lt;code&gt;languageAllowList&lt;/code&gt;を読み取り専用にします。 &lt;/p&gt;
&lt;h3 id=&quot;github-copilot-xml-for-making-the-ui-setting-readonly-and-enabling-all-languages&quot; id=&quot;github-copilot-xml-for-making-the-ui-setting-readonly-and-enabling-all-languages&quot; &gt; github-copilot.xml : UI 設定を読み取り専用にし、すべての言語を有効にする&lt;a href=&quot;#github-copilot-xml-for-making-the-ui-setting-readonly-and-enabling-all-languages&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;github-copilot.xml for making the UI setting readonly and enabling all languages&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;languageAllowListReadOnly&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;languageAllowListReadOnly&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;languageAllowListReadOnly&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;languageAllowListReadOnly&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/&lt;span class=&quot;hljs-name&quot;&gt; &lt;code class=&quot;lang-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;application&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;github-copilot&quot;&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;languageAllowListReadOnly&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;languageAllowList&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;map&lt;/span&gt; &gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;&lt; &lt;span class=&quot;hljs-name&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;key&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;*&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&gt;&lt;/span&gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;map&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;languageAllowList&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;component&lt;/span&gt; &gt;
 &lt;span class=&quot;hljs-tag&quot;&gt;application&lt;/span&gt; &gt;
&lt;/code&gt; &lt;/pre&gt;
&lt;h2 id=&quot;an-easier-way-manage-your-copilot-for-individuals-trial-and-plan&quot; id=&quot;an-easier-way-manage-your-copilot-for-individuals-trial-and-plan&quot; &gt; Copilot for Individuals のトライアルとプランを管理する簡単な方法&lt;a href=&quot;#an-easier-way-manage-your-copilot-for-individuals-trial-and-plan&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;An easier way manage your Copilot for Individuals trial and plan&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;月単位の請求と年単位の請求を切り替える方法についてユーザーから混乱が生じていると聞きました。 GitHub Copilot プランを完全に管理していると感じていただきたいため、プラン オプション間の切り替えを簡単にするために、 &lt;code&gt;Plans and Usage&lt;/code&gt;ページを更新しました。 [Copilot プラン] セクションに進み、 &lt;code&gt;Manage subscription&lt;/code&gt;ボタンを押してオプションを確認してください。&lt;/p&gt;
&lt;p&gt;また、このページから直接 Copilot 試用版をアクティベートするオプションも追加しました。試用期間中に Copilot が合わないとわかった場合は、試用版に移行する前にすぐにキャンセルできます。有料プラン。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2180038/259848688-6b500773-9325-4a90-be2d-b6578cb225ef.png?ssl=1&quot; alt=&quot;裁判中&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;try-out-code-referencing-private-beta-&quot; id=&quot;try-out-code-referencing-private-beta-&quot; &gt; [Private Beta] を参照してコードを試してみましょう! &lt;a href=&quot;#try-out-code-referencing-private-beta-&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Try out code referencing [Private Beta]!&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先週、私たちは Copilot でのコード参照のプライベート ベータ版を発表しました。詳細については、&lt;a href=&quot;https://github.blog/2023-08-03-introducing-code-referencing-for-github-copilot/&quot;&gt;ブログ投稿&lt;/a&gt;にアクセスするか、今すぐ&lt;a href=&quot;https://github.co/copilot-code-referencing-waitlist&quot;&gt;順番待ちリストに参加してください&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;questions-suggestions-or-ideas-&quot; id=&quot;questions-suggestions-or-ideas-&quot; &gt;質問、提案、アイデアがありますか? &lt;a href=&quot;#questions-suggestions-or-ideas-&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Questions, suggestions, or ideas?&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/copilot&quot;&gt;Copilot コミュニティ ディスカッション&lt;/a&gt;の会話に参加してください。あなたからの御一報をお待ちしています！&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-11-github-copilot-august-10th-update&quot;&gt;GitHub Copilot の 8 月 10 日のアップデートの&lt;/a&gt;投稿は、最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73663</post-id></item><item><title>シークレット スキャンはオンデマンドのトークン有効性チェックをサポートします</title><link>https://github.blog/changelog/2023-08-11-secret-scanning-supports-on-demand-token-validity-checks</link><dc:creator>Kevin Duck</dc:creator><pubDate>Fri, 11 Aug 2023 20:09:35 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-11-secret-scanning-supports-on-demand-token-validity-checks</guid><description>&lt;p&gt;Secret scanning supports on-demand token validity checks&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-11-secret-scanning-supports-on-demand-token-validity-checks&quot;&gt;Secret scanning supports on-demand token validity checks&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;GitHub Advanced Security の顧客は、サポートされているパートナー パターンの有効性チェックをオンデマンドで実行できるようになり、アラート インデックス ビューにシークレットがアクティブかどうかが表示されるようになりました。これは、4 月にリリースされた&lt;a href=&quot;https://github.blog/changelog/2023-04-28-secret-scanning-now-supports-validation-checks-for-supported-partner-patterns/&quot;&gt;、サポートされているパートナー パターンの自動検証チェックを有効にする&lt;/a&gt;リリースに基づいています。&lt;/p&gt;
&lt;p&gt;リポジトリで「シークレットが有効であるかどうかを自動的に確認する」設定が有効になっている場合、ユーザーにはアラート ページに「シークレットを確認する」ボタンが表示されます。これにより、シークレットが関連パートナー プロバイダーに送信され、シークレットがアクティブかどうかが確認され、アラート ページとインデックス ページのステータスが更新されます。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://github.com/courtneycl/cocotests-protected/assets/3474250/9bf336ef-3911-42a1-8c39-77852ac6dc85&quot; alt=&quot;シークレットの確認ボタンを備えた adafruit io キー アラートのスクリーンショット&quot;&gt;&lt;/p&gt;
&lt;p&gt;パートナーと協力してさらに多くのシークレットのサポートを追加するにつれて、文書化さ&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/secret-scanning-patterns#supported-secrets&quot;&gt;れたサポートされているシークレット リスト&lt;/a&gt;の「有効性チェック」列を更新します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/about-secret-scanning&quot;&gt;シークレットスキャンについて詳しく見る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/secret-scanning-partner-program&quot;&gt;秘密スキャンパートナーになる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;フィードバックはありましたか?&lt;a href=&quot;https://github.com/orgs/community/discussions/categories/code-security&quot;&gt;コード セキュリティ コミュニティ&lt;/a&gt;でディスカッションを開く&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-11-secret-scanning-supports-on-demand-token-validity-checks&quot;&gt;「シークレット スキャンはオンデマンドのトークン有効性チェックをサポートする」という&lt;/a&gt;投稿は、最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73662</post-id></item><item><title>グループ化された dependabot プル リクエストの更新を無視または無視しない</title><link>https://github.blog/changelog/2023-08-10-ignore-or-unignore-updates-for-grouped-dependabot-pull-requests</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 20:33:41 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-ignore-or-unignore-updates-for-grouped-dependabot-pull-requests</guid><description>&lt;p&gt;Ignore or Unignore Updates for Grouped Dependabot Pull Requests&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-ignore-or-unignore-updates-for-grouped-dependabot-pull-requests&quot;&gt;Ignore or Unignore Updates for Grouped Dependabot Pull Requests&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;dependabot のグループ化されたバージョン更新機能 (現在パブリック ベータ版) を使用している場合は、グループ内の更新を無視するようにdependabot に指示できるようになりました (dependabot の個別の更新の場合と同様)。グループ化されたプル リクエストを閉じても無視条件は作成されませんが、Dependabot のコメント コマンドを使用して、グループ内の特定の更新 (特定のマイナー アップデート、特定のメジャー アップデート、または 1 つの依存関係のすべての更新) を無視するように dependabot に指示できます。&lt;/p&gt;
&lt;p&gt;グループ化されたプル リクエストで、すでに無視した特定の更新の無視をやめるように、Dependabot に指示できるようになりました。 &lt;code&gt;@dependabot unignore&lt;/code&gt;をコメント化することで、特定の範囲の更新、特定の依存関係のすべての更新、またはグループ内のすべての依存関係のすべての更新の無視を停止することを指定できます。また、Dependabot は、プル リクエストの作成に使用したすべての無視条件をプル リクエスト本文にリストするようになります。または、 &lt;code&gt;@dependabot show ignore conditions&lt;/code&gt;にコメントすることもできます&lt;dependency-name&gt;&lt;code&gt;@dependabot show ignore conditions&lt;/code&gt;と、Dependabot はその依存関係の無視条件をリストします。&lt;/p&gt;
&lt;p&gt; dependabot の無視条件とチャット コマンドの詳細については、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/working-with-dependabot/managing-pull-requests-for-dependency-updates&quot;&gt;ドキュメントを参照してください&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;この&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-ignore-or-unignore-updates-for-grouped-dependabot-pull-requests&quot;&gt;投稿は、&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73650</post-id></item><item><title>開発または運用の依存関係ごとに依存性ボットのバージョン更新をグループ化する</title><link>https://github.blog/changelog/2023-08-10-group-dependabot-version-updates-by-development-or-production-dependencies</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 20:33:34 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-group-dependabot-version-updates-by-development-or-production-dependencies</guid><description>&lt;p&gt;Group Dependabot Version Updates by Development or Production Dependencies&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-group-dependabot-version-updates-by-development-or-production-dependencies&quot;&gt;Group Dependabot Version Updates by Development or Production Dependencies&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;dependabot のグループ化されたバージョン更新機能 (現在パブリック ベータ版) を使用している場合、これをサポートするエコシステムで依存関係の種類ごとにプル リクエストをグループ化できるようになりました。グループのすべての依存関係を名前またはパターンでリストする代わりに、 &lt;code&gt;dependency-type&lt;/code&gt;キー (「production」または「development」のいずれかに設定) を使用して、依存関係の種類に基づいてグループを作成することもできるようになりました。次に、バージョン更新スケジュールに従って、Dependabot は 1 つのプル リクエストを開いて、そのタイプの利用可能な依存関係をすべて更新しようとします。&lt;/p&gt;
&lt;p&gt;この機能の使用方法の詳細については、 &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#groups&quot;&gt;Dependabot プル リクエストのグループの構成に関するドキュメントを&lt;/a&gt;参照してください。&lt;/p&gt;
&lt;p&gt;投稿&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-group-dependabot-version-updates-by-development-or-production-dependencies&quot;&gt;「開発または運用の依存関係別の依存ボットのバージョン更新のグループ化」は、&lt;/a&gt;最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73649</post-id></item><item><title>GitHub の問題とプロジェクト – 8 月 10 日の更新</title><link>https://github.blog/changelog/2023-08-10-github-issues-projects-august-10th-update</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 20:02:24 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-auto-draft</guid><description>&lt;p&gt;Today&amp;#8217;s Changelog brings you the brand new slice by, updates to issue forms, and a group menu across layouts! 🍕 Slice by You can now slice by field values in your project views! Configuring a Slice by field allows you to quickly toggle through and review your project items broken down by a field, saving [&amp;#8230;]&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-github-issues-projects-august-10th-update&quot;&gt;GitHub Issues &amp; Projects &amp;#8211; August 10th update&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;今日の変更ログでは、新しいスライスバイ、発行フォームの更新、レイアウト全体のグループメニューをお届けします。 &lt;/p&gt;
&lt;h2 id=&quot;%f0%9f%8d%95-slice-by&quot;&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f355.png&quot; alt=&quot;🍕&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;スライス単位&lt;a href=&quot;#%f0%9f%8d%95-slice-by&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;&amp;#x1f355; Slice by&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;プロジェクト ビューでフィールド値ごとにスライスできるようになりました。フィールド&lt;code&gt;Slice by&lt;/code&gt;を構成すると、フィールドごとに分類されたプロジェクト項目をすばやく切り替えて確認できるため、追加のフィルターやビューを節約して、プロジェクトの状態と詳細をすばやく理解できます。問題やプロジェクトのフィールドごとにスライスしてビューをカスタマイズできますが、役立つスライスごとのビューには次のようなものがあります。&lt;br /&gt;
 – 単一選択フィールドでステータス、優先度、またはチームごとに項目を表示&lt;br /&gt;
– リポジトリラベルごとにアイテムをグループ化するための&lt;code&gt;Labels&lt;/code&gt;&lt;br /&gt;
 – &lt;code&gt;Assignees&lt;/code&gt;誰が何に取り組んでいるかを確認できます&lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2180038/259850616-e8bed780-945e-475d-bb9c-4659b6bd2d34.jpg?ssl=1&quot; alt=&quot;スライスバイ&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;ビュー設定メニューから&lt;code&gt;Slice by&lt;/code&gt;を選択します。これにより、フィールド値が左側のパネルに取り込まれ、リスト内の値をクリックしてビューに表示される項目を調整できるようになります。 &lt;/p&gt;
&lt;div style=&quot;width: 640px;&quot; class=&quot;wp-video&quot;&gt;&lt;!--[if lt IE 9]&gt;&lt;script&gt;document.createElement(&apos;video&apos;);&lt;/script&gt;&lt;![endif]--&gt;
&lt;video class=&quot;wp-video-shortcode&quot; id=&quot;video-73647-1&quot; width=&quot;640&quot; height=&quot;360&quot; loop=&quot;1&quot; preload=&quot;metadata&quot; controls=&quot;controls&quot;&gt;&lt;source type=&quot;video/mp4&quot; src=&quot;//user-images.githubusercontent.com/101840513/259834557-557ecbe6-faab-48e7-8c3d-4c107c55095b.mp4?_=1&quot; /&gt; &lt;a href=&quot;//user-images.githubusercontent.com/101840513/259834557-557ecbe6-faab-48e7-8c3d-4c107c55095b.mp4&quot;&gt;//user-images.githubusercontent.com/101840513/259834557-557ecbe6-faab-48e7-8c3d-4c107c55095b.mp4&lt;/a&gt;&lt;/video&gt;&lt;/div&gt;
&lt;p&gt; &lt;a href=&quot;https://github.com/orgs/github/projects/4247/views/7?sliceBy%5BcolumnId%5D=Labels&amp;sliceBy%5Bvalue%5D=all&quot;&gt;GitHub パブリック ロードマップ&lt;/a&gt;で実際の動作を確認し、詳細については&lt;a href=&quot;https://docs.github.com/en/issues/planning-and-tracking-with-projects/customizing-views-in-your-project/customizing-the-table-layout#slicing-by-field-values&quot;&gt;ドキュメント&lt;/a&gt;を確認してください。 &lt;/p&gt;
&lt;h2 id=&quot;%f0%9f%93%8b-updates-to-issue-forms&quot;&gt;&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f4cb.png&quot; alt=&quot;📋&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;発行フォームの更新&lt;a href=&quot;#%f0%9f%93%8b-updates-to-issue-forms&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;&amp;#x1f4cb; Updates to issue forms&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; YAML フォーム定義ファイルをリポジトリの&lt;code&gt;/.github/ISSUE_TEMPLATE&lt;/code&gt;フォルダーに追加することで、プロジェクトに自動的に課題を追加したり、ドロップダウンのデフォルトを設定したりするようにカスタム課題フォームを構成できるようになりました。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/2180038/259850688-8ec0dc37-1178-4489-af74-de4cb0b0e07b.png?ssl=1&quot; alt=&quot;フォームの yaml 構文を発行する&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;発行フォームの構文に関するより包括的な手順については、 &lt;a href=&quot;https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-issue-forms&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;私たちは、問題フォームとテンプレートに関するエクスペリエンスの向上を目指しています。ご意見がございましたら&lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f449.png&quot; alt=&quot;👉&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;a href=&quot;https://github.com/orgs/community/discussions/63402&quot;&gt;コミュニティディスカッション&lt;/a&gt;にコメントをドロップしてください!&lt;/p&gt;
&lt;h2 id=&quot;group-menu-for-item-and-group-actions&quot;&gt;アイテムとグループアクションのグループメニュー&lt;a href=&quot;#group-menu-for-item-and-group-actions&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;Group menu for item and group actions&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;グループ内の項目またはグループ自体に対して迅速にアクションを実行できるように、グループ メニューを追加しました。テーブル、ボード、またはロードマップのグループ ヘッダーから&lt;code&gt;...&lt;/code&gt;をクリックして、グループ内のすべてのアイテムをアーカイブまたは削除したり、グループの詳細を直接編集したり、ビューからグループを非表示にしたり、プロジェクトから削除したりできます。 &lt;/p&gt;
&lt;p&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/user-images.githubusercontent.com/101840513/259855714-7d8e5230-a000-4597-9339-9b9fed32d54d.jpg?ssl=1&quot; alt=&quot;グループメニュー&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;bug-fixes-and-improvements&quot;&gt;&lt;g-emoji fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8&quot; alias=&quot;sparkles&quot;&gt; ✨&lt;/g-emoji&gt;バグ修正と改善&lt;a href=&quot;#bug-fixes-and-improvements&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;&lt;g-emoji fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8&quot; alias=&quot;sparkles&quot;&gt;✨&lt;/a&gt;&lt;/g-emoji&gt; &lt;a href=&quot;#bug-fixes-and-improvements&quot; class=&quot;heading-link pl-2 text-italic text-bold&quot; aria-label=&quot;&lt;g-emoji fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8&quot; alias=&quot;sparkles&quot;&gt;バグ修正と改善&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt; [プロジェクトから&lt;code&gt;Make a copy&lt;/code&gt; &lt;code&gt;...&lt;/code&gt;メニューに移動するときのキーボード ナビゲーションとフォーカスを修正しました。&lt;/li&gt;
&lt;li&gt;ロードマップ レイアウト上のグループ ヘッダーの間隔を修正しました&lt;/li&gt;
&lt;li&gt;反復フィールドに&lt;code&gt;@next&lt;/code&gt;フィルター修飾子を使用すると、間違った反復が参照されるバグを修正しました&lt;/li&gt;
&lt;li&gt;数値&lt;code&gt;Field sum&lt;/code&gt;小数精度に関するバグを修正しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;a href=&quot;http://github.com/features/issues&quot;&gt;GitHub Issues&lt;/a&gt;でプロジェクト計画に GitHub を使用する方法を確認し、&lt;a href=&quot;https://github.com/orgs/github/projects/4247/views/7&quot;&gt;ロードマップ&lt;/a&gt;の内容を確認し、&lt;a href=&quot;https://docs.github.com/issues&quot;&gt;ドキュメント&lt;/a&gt;で詳細を確認してください。&lt;/p&gt;
&lt;p&gt;ご質問またはご提案はありますか?&lt;a href=&quot;https://github.com/orgs/community/discussions/63381&quot;&gt;コミュニティディスカッション&lt;/a&gt;の会話に参加してください。&lt;/p&gt;
&lt;p&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-github-issues-projects-august-10th-update&quot;&gt;GitHub の問題とプロジェクト – 8 月 10 日の更新の投稿は、&lt;/a&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73647</post-id></item><item><title>詳細な権限アクターの X-Accepted-GitHub-Permissions ヘッダー</title><link>https://github.blog/changelog/2023-08-10-x-accepted-github-permissions-header-for-fine-grained-permission-actors</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 19:39:31 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-x-accepted-github-permissions-header-for-fine-grained-permission-actors</guid><description>&lt;p&gt;X-Accepted-GitHub-Permissions header for fine-grained permission actors&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-x-accepted-github-permissions-header-for-fine-grained-permission-actors&quot;&gt;X-Accepted-GitHub-Permissions header for fine-grained permission actors&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;新しいヘッダーは、開発者が API ルートを呼び出すために必要な権限を発見できるように、詳細な権限モデル (GitHub アプリと詳細な PAT) を使用する API 呼び出し元に送り返されます。この新しいヘッダー&lt;code&gt;x-accepted-github-permissions&lt;/code&gt; 、エンドポイントへのアクセスに必要な権限のリストが含まれています。&lt;/p&gt;
&lt;p&gt;詳細な権限モデルでは、エンドポイントにアクセスするために複数の権限が必要になる場合があります。 GitHub 内のデータにアクセスするには複数の方法があるため、複数の権限セットが有効になる場合もあります。すべての有効なセットがヘッダーに含まれており、各セットはセミコロン ( &lt;code&gt;;&lt;/code&gt; ) で区切られています。&lt;/p&gt;
&lt;p&gt;たとえば、 &lt;a href=&quot;https://docs.github.com/en/rest/projects/collaborators?apiVersion=2022-11-28#list-project-collaborators&quot;&gt;「List projectcollaborators」&lt;/a&gt;を呼び出すと、ヘッダー&lt;code&gt;x-accepted-github-permissions: repository_projects=write; organization_projects=admin&lt;/code&gt;を受け取ります。 &lt;code&gt;x-accepted-github-permissions: repository_projects=write; organization_projects=admin&lt;/code&gt; 。これは、プロジェクトのコラボレーターのリストを取得するには、 &lt;code&gt;repository_projects&lt;/code&gt;書き込み権限&lt;em&gt;か、&lt;/em&gt; &lt;code&gt;organization_projects&lt;/code&gt;管理権限の&lt;em&gt;いずれかが&lt;/em&gt;必要であることを示しています。&lt;/p&gt;
&lt;p&gt;このヘッダーは、粗粒度スコープ アクター (OAuth アプリおよび PAT (クラシック)) の&lt;code&gt;x-accepted-oauth-scopes&lt;/code&gt;ヘッダーと同じ方法で使用されます。&lt;/p&gt;
&lt;p&gt; GitHub アプリおよび詳細な PAT に関する権限の問題のトラブルシューティングの詳細と、このヘッダーに関する詳細については、 &lt;a href=&quot;https://docs.github.com/en/rest/overview/troubleshooting#insufficient-permissions-errors&quot;&gt;「権限が不十分なエラー」&lt;/a&gt;を参照してください。各エンドポイントに必要な権限を確認するには、 &lt;a href=&quot;https://docs.github.com/en/rest/overview/permissions-required-for-github-apps&quot;&gt;「GitHub アプリに必要な権限」&lt;/a&gt;および&lt;a href=&quot;https://docs.github.com/en/rest/overview/permissions-required-for-fine-grained-personal-access-tokens&quot;&gt;「詳細な PAT に必要な権限」&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;p&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-x-accepted-github-permissions-header-for-fine-grained-permission-actors&quot;&gt;詳細な権限アクターのポスト X-Accepted-GitHub-Permissions ヘッダーは、&lt;/a&gt;最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に登場しました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73646</post-id></item><item><title>保護されたブランチと同じ名前のタグまたはフォークからトリガーされたアクションの実行がブロックされるようになりました</title><link>https://github.blog/changelog/2023-08-10-actions-runs-triggered-from-tags-or-forks-with-the-same-name-as-a-protected-branch-will-now-be-blocked</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 19:23:40 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-actions-runs-triggered-from-tags-or-forks-with-the-same-name-as-a-protected-branch-will-now-be-blocked</guid><description>&lt;p&gt;Actions Runs triggered from tags or forks with the same name as a protected branch will now be blocked&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-actions-runs-triggered-from-tags-or-forks-with-the-same-name-as-a-protected-branch-will-now-be-blocked&quot;&gt;Actions runs triggered from tags or forks with the same name as a protected branch will now be blocked&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;GitHub &lt;a href=&quot;https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#about-environments&quot;&gt;環境は、&lt;/a&gt;デプロイメントできるブランチを許可リストに登録するデプロイメント ブランチ ポリシーを使用して構成できます。&lt;/p&gt;
&lt;p&gt;現在、保護されたブランチ名と一致するブランチを含むフォークからトリガーされる実行をブロックすることで、これらのブランチ ポリシーのセキュリティをさらに強化しています。また、保護されたブランチと同じ名前のタグが、保護されたブランチの周囲にブランチ ポリシーが設定されている環境にデプロイされるのを防ぎます。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-branches&quot;&gt;デプロイメント保護ルールを&lt;/a&gt;使用して環境を構成し、デプロイメント用に厳格かつ合理化されたガードレールを設定する方法について詳しく説明します。&lt;/p&gt;
&lt;p&gt;質問がある場合は、 &lt;a href=&quot;https://github.com/orgs/community/discussions/categories/actions&quot;&gt;GitHub Actions コミュニティ&lt;/a&gt;にアクセスしてください。&lt;br /&gt;
 Actions の次の予定については、&lt;a href=&quot;https://github.com/orgs/github/projects/4247&quot;&gt;公開ロードマップ&lt;/a&gt;をご覧ください。&lt;/p&gt;
&lt;p&gt;投稿&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-actions-runs-triggered-from-tags-or-forks-with-the-same-name-as-a-protected-branch-will-now-be-blocked&quot;&gt;「保護されたブランチと同じ名前のタグまたはフォークからトリガーされるアクションの実行はブロックされるようになります」&lt;/a&gt; first appeared on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt; .&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73644</post-id></item><item><title>REST API 経由で組織のリポジトリ セキュリティ アドバイザリを取得する</title><link>https://github.blog/changelog/2023-08-10-get-repository-security-advisories-for-your-organization-via-rest-api</link><dc:creator>Kevin Duck</dc:creator><pubDate>Thu, 10 Aug 2023 18:13:31 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-10-get-repository-security-advisories-for-your-organization-via-rest-api</guid><description>&lt;p&gt;Get repository security advisories for your organization via REST API&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-get-repository-security-advisories-for-your-organization-via-rest-api&quot;&gt;Get repository security advisories for your organization via REST API&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;組織の所有者またはセキュリティ マネージャー ロールのメンバーは、 &lt;a href=&quot;https://docs.github.com/en/rest/security-advisories/repository-advisories#list-repository-security-advisories-for-an-organization&quot;&gt;リポジトリ セキュリティ アドバイザリ REST API を使用して、&lt;/a&gt;組織全体のすべてのリポジトリ セキュリティ アドバイザリを取得できるようになりました。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.github.com/en/code-security/security-advisories/repository-security-advisories/about-repository-security-advisories&quot;&gt;リポジトリのセキュリティ勧告&lt;/a&gt;について詳しくは、こちらをご覧ください。&lt;/p&gt;
&lt;p&gt; &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-10-get-repository-security-advisories-for-your-organization-via-rest-api&quot;&gt;REST API 経由で組織のリポジトリ セキュリティ アドバイザリを取得するという&lt;/a&gt;投稿は&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;、 GitHub ブログ&lt;/a&gt;に最初に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73642</post-id></item><item><title>ユーザーは自分自身でプッシュ保護を有効にすることができます</title><link>https://github.blog/changelog/2023-08-09-users-can-enable-push-protection-for-themselves</link><dc:creator>Kevin Duck</dc:creator><pubDate>Wed, 09 Aug 2023 20:46:09 +0000</pubDate><guid isPermaLink="false">https://github.blog/changelog/2023-08-09-users-can-enable-push-protection-for-themselves</guid><description>&lt;p&gt;Users can enable push protection for themselves&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-09-users-can-enable-push-protection-for-themselves&quot;&gt;Users can enable push protection for themselves&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;The GitHub Blog&lt;/a&gt;.&lt;/p&gt;
</description><content:encoded>&lt;p&gt;シークレット スキャンのプッシュ保護機能は、サポートされているシークレットがリポジトリにプッシュされるのを防ぎますが、これまではリポジトリ、組織、またはエンタープライズ レベルで有効にする必要がありました。&lt;/p&gt;
&lt;p&gt; GitHub 全体の誰もが、個別の設定内で自分自身のプッシュ保護を有効にできるようになりました。これにより、GitHub 上のパブリック リポジトリにプッシュするたびに、そのリポジトリでプッシュ保護が有効になっていることに依存することなく、プッシュが確実に保護されます。&lt;/p&gt;
&lt;p&gt;オプトインするには、個人設定の&lt;a href=&quot;https://github.com/settings/security_analysis&quot;&gt;「コードのセキュリティと分析」&lt;/a&gt;セクションに移動します。 「自分自身へのプッシュ保護」の横にある「有効にする」をクリックします。&lt;/p&gt;
&lt;p&gt; GitHub は、2024 年 1 月に、すべての GitHub Free 個人に対してプッシュ保護をデフォルトで有効にする予定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;a href=&quot;https://github.blog/2023-08-09-enhanced-push-protection-features-for-developers-and-organizations&quot;&gt;ブログ投稿を読む&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/orgs/community/discussions/63294&quot;&gt;コミュニティディスカッション&lt;/a&gt;でフィードバックや質問を共有します&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/github/administering-a-repository/about-secret-scanning&quot;&gt;シークレットスキャンについて詳しく見る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/enterprise-cloud@latest/code-security/secret-scanning/push-protection-for-users&quot;&gt;ユーザーのプッシュ保護について詳しく見る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog/changelog/2023-08-09-users-can-enable-push-protection-for-themselves&quot;&gt;「ユーザーが自分自身でプッシュ保護を有効にできる」&lt;/a&gt;という投稿は、最初に&lt;a rel=&quot;nofollow&quot; href=&quot;https://github.blog&quot;&gt;GitHub ブログ&lt;/a&gt;に掲載されました。&lt;/p&gt;
</content:encoded><post-id xmlns="com-wordpress:feed-additions:1">73628</post-id></item></channel></rss>